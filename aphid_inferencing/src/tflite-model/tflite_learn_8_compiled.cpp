/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 02.04.2025 05:31:56

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238592;
#else
constexpr int kTensorArenaSize = 237568;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[2] = { 31659, -40237, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00015338594675995409, 0.00011734557483578101, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 60,-37,-28,101,-87,-9,19,56,83,-28,-52,-32,10,48,-63,-2,111,-98,13,-31,116,36,48,-69,-79,-81,-69,127,10,-38,-15,73, 
  /* [1][0][][] */ 53,88,83,-63,-73,85,-42,16,-34,-11,46,121,124,53,53,6,-39,21,-63,-103,-81,48,42,124,99,89,-47,-42,103,-127,-110,-15, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0044289701618254185, 0.0033883159048855305, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -382, 533, 537, -270, -730, 576, 1339, 724, -593, -483, 503, 530, 581, 584, 549, -723, -569, -77, -194, -9, -182, 686, 660, 585, 621, 567, -338, 1369, -850, 137, -303, -373, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.506548066274263e-05, 4.8494606744498014e-05, 5.0884213123936206e-05, 4.6026805648580194e-05, 4.5069042243994772e-05, 4.7066376282600686e-05, 5.7205226767109707e-05, 4.7768509830348194e-05, 5.130109639139846e-05, 4.6471941459458321e-05, 5.1783488743240014e-05, 4.9401092837797478e-05, 4.660772901843302e-05, 4.8606456402922049e-05, 5.0734899559756741e-05, 4.2685063817771152e-05, 4.2423082049936056e-05, 6.0332684370223433e-05, 4.216663000988774e-05, 4.2100509745068848e-05, 5.8958612498827279e-05, 4.4615288061322644e-05, 4.8109453928191215e-05, 4.6409324568230659e-05, 4.9545884394319728e-05, 4.6148896217346191e-05, 4.5902805140940472e-05, 6.3932966440916061e-05, 4.4488955609267578e-05, 4.4569256715476513e-05, 4.6453664253931493e-05, 4.3486848881002516e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -59,-67,99,7,90,-24,-101,-113,54,-108,-122,-6,49,0,-49,43,-59,-34,-76,-62,-77,-116,-6,102,-122,2,69,-54,102,-13,-32,-97,76,-73,-105,57,-116,-93,-98,18,69,-99,-110,94,43,-127,101,-31, 
  /* [1][0][][] */ -42,19,-63,6,-23,80,36,17,88,-90,-103,124,78,-40,20,63,107,-27,52,127,-32,2,49,18,22,35,-59,109,27,-3,87,-52,71,115,-1,34,60,68,-6,-43,-53,18,-23,-87,-23,44,-32,-45, 
  /* [2][0][][] */ 54,22,-51,93,-6,-62,80,95,-76,86,-35,127,97,-39,71,-115,-51,-15,49,63,-75,-5,116,7,-35,94,74,14,-47,61,57,96,-48,-3,-75,-89,-69,100,103,-5,-101,-58,11,4,-66,116,-27,-63, 
  /* [3][0][][] */ 72,-2,37,-24,-76,48,-96,37,46,19,69,-6,92,102,74,3,104,95,-62,16,112,-92,-68,-121,-24,-127,-86,103,45,-103,82,6,-62,-42,-20,-21,-95,-28,39,38,-31,-96,-92,5,70,25,-49,-88, 
  /* [4][0][][] */ 43,111,-12,43,-41,-29,21,4,49,81,-18,34,12,-29,-18,-71,-36,-14,-84,-2,96,-106,72,24,-22,-19,68,-69,-67,34,-71,-66,58,104,1,-118,-64,-19,-127,37,-61,-77,-81,-107,22,98,30,47, 
  /* [5][0][][] */ 105,-111,77,88,55,-127,22,64,114,-106,-12,-42,38,81,23,20,58,67,-52,109,45,55,32,-44,-124,-48,-37,-86,64,10,6,-88,-21,20,-65,17,-104,-28,51,41,-96,-39,37,94,-22,32,23,-45, 
  /* [6][0][][] */ 39,-15,127,89,-49,-9,20,87,-14,-36,44,-89,84,74,123,-48,70,33,-2,98,-44,-68,109,75,-20,-58,35,-16,-10,-48,66,-29,-69,-79,-29,-58,22,58,-72,68,96,72,45,16,-61,100,-64,-18, 
  /* [7][0][][] */ 117,62,-23,-28,-55,116,-26,13,120,17,-94,32,70,-96,55,74,64,18,17,127,66,45,8,79,-69,113,29,66,-60,103,-31,49,37,39,74,105,-87,86,2,-19,101,-61,89,72,62,10,97,-99, 
  /* [8][0][][] */ -8,39,-49,-92,39,20,-92,-30,-11,24,28,64,-16,-33,-79,-69,-69,69,-79,-1,12,-33,56,100,-106,62,52,62,-81,19,-94,92,70,-44,30,-16,94,-19,-26,41,64,79,-106,-127,-22,-36,-26,89, 
  /* [9][0][][] */ -8,-3,105,38,72,-114,-11,-127,34,41,-18,44,-37,-78,-111,-33,-1,-10,-106,-78,-5,91,-118,-112,102,-14,-22,17,-21,-68,-84,90,52,-9,18,-27,-85,6,-43,-55,39,-77,44,-100,71,12,-112,45, 
  /* [10][0][][] */ -43,57,85,-53,-1,94,96,33,45,35,16,-38,105,59,-38,9,-34,83,-72,-42,-3,31,65,-75,8,66,-127,-98,-28,58,-92,-64,91,104,112,72,-27,15,-24,51,-29,115,-105,-30,-78,-44,-10,-48, 
  /* [11][0][][] */ 116,-2,-8,106,124,45,49,37,115,95,-75,127,9,-95,24,-61,-50,-85,77,51,43,78,37,-111,-111,-72,-38,73,91,-14,14,-8,-70,-54,57,50,-49,80,-20,-37,-18,110,-71,11,-29,-47,-88,-77, 
  /* [12][0][][] */ 26,55,-48,11,102,10,-41,44,-67,69,-21,37,-28,-16,47,-78,-94,-21,-30,-65,41,-3,32,88,-79,-34,79,-91,110,6,-59,127,-72,-55,-39,20,9,-67,-9,61,121,53,-111,-36,-10,-72,-44,125, 
  /* [13][0][][] */ 114,-67,106,103,104,113,74,71,79,-89,10,-6,103,56,66,-44,-106,-60,-50,42,78,-18,127,-51,-70,55,-11,26,-67,-90,69,47,52,114,-11,43,-68,-22,33,81,-53,86,-49,17,-30,38,-5,-20, 
  /* [14][0][][] */ -37,-111,84,72,87,-24,-10,-94,-54,-25,64,100,-11,-92,-93,-83,-48,-41,31,37,-25,39,14,51,-127,-46,-56,35,-87,-125,-78,46,114,-4,-20,15,99,124,39,-80,3,-89,25,92,74,-93,61,-69, 
  /* [15][0][][] */ -6,-53,-47,65,90,-101,46,-117,57,-17,-85,11,106,-6,-113,-127,78,-15,-98,16,39,10,67,103,61,79,26,87,15,44,64,-124,-5,0,-77,-12,-84,105,105,-82,10,108,-78,-36,16,-97,-64,-102, 
  /* [16][0][][] */ -89,20,107,-74,33,122,-53,36,48,45,-110,57,-30,-32,-54,-65,115,73,63,59,108,81,-56,66,-18,43,-50,63,-127,25,59,4,-127,71,57,60,-48,53,-61,-94,18,-62,79,97,59,104,116,-21, 
  /* [17][0][][] */ 66,-108,-6,54,-13,-97,-36,-81,68,-71,57,83,98,21,-127,22,-11,69,102,99,-52,-9,30,-64,-26,83,-95,14,104,-73,-18,58,9,2,37,18,-44,112,-69,24,-83,-22,-30,1,11,12,77,-80, 
  /* [18][0][][] */ -92,115,113,-78,-10,-125,-95,2,-3,79,-118,-58,-38,95,64,-67,17,-28,57,-29,110,-52,27,-76,34,-119,-20,120,36,35,34,43,51,-34,-112,-113,-39,57,-38,78,-50,-2,-52,1,-127,13,45,-1, 
  /* [19][0][][] */ 61,64,96,51,66,-93,127,103,110,-62,48,-16,-94,54,-46,68,100,-73,125,69,-21,94,-47,29,124,-86,56,-76,-88,-115,-54,57,92,-89,46,6,14,-60,-56,-98,52,-120,-48,28,-88,36,98,-92, 
  /* [20][0][][] */ 5,60,55,75,-69,70,45,44,11,10,-68,-4,-6,127,34,-59,-39,-27,-57,-24,17,-37,-60,-54,73,-62,-78,36,17,11,0,88,77,31,-13,42,32,-17,-12,-84,-70,-27,-61,-79,-23,-51,-49,83, 
  /* [21][0][][] */ 106,76,82,-96,115,-77,80,29,16,-58,-61,65,21,15,-50,-95,-102,-24,49,1,125,-37,90,-89,49,-69,-41,84,32,2,-1,-11,22,37,-80,-101,127,116,-113,-17,4,20,29,2,-89,-76,-80,106, 
  /* [22][0][][] */ 41,-56,-61,-82,102,-47,107,68,-73,95,-60,-82,127,-120,-105,-77,45,89,-87,-42,100,-58,47,31,82,18,-121,106,-40,-76,-66,-93,63,76,33,29,16,1,-47,-94,14,2,3,108,68,-101,93,-11, 
  /* [23][0][][] */ 76,-104,9,65,110,-120,3,-93,68,-74,83,98,33,-127,14,-53,90,-23,-89,114,106,-74,118,-46,-31,4,61,27,87,35,58,-28,-25,57,28,41,107,4,-105,26,-99,12,6,-103,-59,-82,109,33, 
  /* [24][0][][] */ -53,-64,-91,-55,-64,-122,-60,-75,76,121,76,68,125,45,-45,-127,-72,54,46,-33,107,-68,-35,-43,43,-8,49,60,119,32,-1,-45,14,26,55,32,-38,-68,66,5,-62,-79,97,11,32,-23,39,75, 
  /* [25][0][][] */ -71,-72,-75,-2,108,-72,-102,63,57,-104,-42,47,89,-20,-115,-24,-71,74,52,-96,83,92,3,-67,1,-34,-126,45,94,-100,29,127,108,-96,52,80,109,-49,-16,4,-78,110,-107,10,110,51,63,43, 
  /* [26][0][][] */ 53,-115,-26,-14,-103,4,55,-19,-97,-127,116,87,-77,-38,13,6,113,33,-54,-59,13,72,101,9,43,77,19,40,18,7,-66,-3,-29,-65,-97,-96,-69,90,-56,108,-106,102,75,42,-77,70,-39,101, 
  /* [27][0][][] */ 27,42,-17,-47,-70,-12,-40,20,41,102,46,-127,-13,65,92,18,84,-5,42,-51,-58,34,-4,26,-36,20,-34,30,47,63,-12,7,58,62,-44,-49,-37,-35,-44,65,-39,35,46,28,101,45,80,113, 
  /* [28][0][][] */ 87,-5,70,29,-126,-78,-109,-97,-46,-127,61,60,-93,-89,-15,102,77,111,-86,60,-42,9,-122,-79,-121,79,-90,-77,-88,-91,-2,-33,-115,10,72,64,0,-115,-60,32,95,29,-109,50,-125,-25,5,37, 
  /* [29][0][][] */ 53,92,58,-53,-89,20,-114,15,112,-9,-80,-127,105,-91,-25,-38,-104,95,27,-85,-84,-21,64,28,-19,6,-14,-9,-124,22,122,-10,61,5,-67,-46,-11,120,3,100,61,113,-43,98,13,111,-33,2, 
  /* [30][0][][] */ 27,-60,-66,32,-104,18,-60,-19,110,-21,0,-48,-106,26,56,6,-10,35,86,-104,36,-105,-118,10,-113,23,-71,111,-18,-114,-91,0,-88,-76,-124,-60,10,-14,-10,20,83,-81,46,127,99,-48,99,56, 
  /* [31][0][][] */ 93,-97,41,107,49,65,-49,-110,-38,-23,-80,-102,103,-119,-50,116,-61,-96,33,52,65,33,-37,112,70,-127,41,38,-80,-80,55,116,14,16,-105,-14,101,-33,-75,-125,58,-76,-21,32,0,-61,-46,22, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0022411397658288479, 0.0024116728454828262, 0.0025305096060037613, 0.0022889471147209406, 0.0022413169499486685, 0.0023406457621604204, 0.0028448584489524364, 0.0023755633737891912, 0.0025512415450066328, 0.0023110841866582632, 0.0025752312503755093, 0.0024567530490458012, 0.0023178369738161564, 0.0024172351695597172, 0.0025230841711163521, 0.0021227598190307617, 0.0021097313147038221, 0.0030003890860825777, 0.0020969777833670378, 0.0020936895161867142, 0.0029320556204766035, 0.0022187514696270227, 0.002392518799751997, 0.0023079700767993927, 0.0024639535695314407, 0.0022950188722461462, 0.0022827805951237679, 0.0031794339884072542, 0.0022124687675386667, 0.0022164622787386179, 0.0023101752158254385, 0.0021626332309097052, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[48] = { -197, 817, 1996, 4844, 7359, -1103, -1170, 24733, 1357, 8127, 409, -799, 5100, -3226, 2635, -2261, -466, -3680, 874, 1613, 2823, 3965, 4378, 481, -2376, -2017, 548, 2381, 2023, 4205, -1181, 2451, 3586, 4189, 4601, 2074, 12678, 1940, 1306, -1267, 655, 10544, -631, 1959, 9241, -7, 1610, 3858, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00035962837864644825, 0.00042398794903419912, 0.00013534037861973047, 0.00012755519128404558, 0.00012914453691337258, 0.0001231697533512488, 0.00027918288833461702, 4.0224542317446321e-05, 0.00022617453942075372, 9.902686724672094e-05, 0.00016227645392064005, 0.00043065124191343784, 0.00013130044681020081, 0.0001897698239190504, 0.00027954683173447847, 0.00010748565546236932, 0.00012675370089709759, 5.017153307562694e-05, 0.00026829360285773873, 0.00034366128966212273, 0.00023359277111012489, 0.00012895194231532514, 0.00014966534217819571, 0.00024419926921837032, 0.00019447652448434383, 0.00024100778682623059, 0.0002160784206353128, 0.0002277806488564238, 0.00017226605268660933, 0.00014378182822838426, 0.00011117057147203013, 0.00025573099264875054, 0.00018541907775215805, 0.0001720576110528782, 9.2929170932620764e-05, 0.00011989173071924597, 7.0414112997241318e-05, 0.00013827846851199865, 0.0001236222597071901, 0.00021282891975715756, 0.00018863505101762712, 9.232290176441893e-05, 0.00021126033971086144, 0.00011230407108087093, 8.689654350746423e-05, 0.00015950464876368642, 0.00017656284035183489, 0.00019909597176592797, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 33,-31,-72,25,-127,14,-75,8, 
  /* [1][0][][] */ -127,23,116,11,-115,-14,3,-13, 
  /* [2][0][][] */ -1,73,-28,24,-63,-127,-10,78, 
  /* [3][0][][] */ -66,28,-8,127,17,-51,-76,-29, 
  /* [4][0][][] */ 27,-16,36,-118,-13,16,-127,21, 
  /* [5][0][][] */ 64,125,-63,-50,-42,-12,39,-127, 
  /* [6][0][][] */ 70,-54,49,101,-32,-127,-6,-90, 
  /* [7][0][][] */ 42,113,-53,-63,-50,-27,17,-127, 
  /* [8][0][][] */ 7,-38,56,-1,15,6,-58,-127, 
  /* [9][0][][] */ -87,-4,-101,24,-127,-77,-81,-27, 
  /* [10][0][][] */ 91,-2,93,-29,-127,4,80,96, 
  /* [11][0][][] */ 127,-37,-69,1,58,10,-72,-11, 
  /* [12][0][][] */ -13,-109,127,14,30,8,-84,74, 
  /* [13][0][][] */ 28,-65,72,-13,14,-127,47,-107, 
  /* [14][0][][] */ -115,49,127,10,-16,-84,51,-44, 
  /* [15][0][][] */ 33,118,-32,-67,-81,15,44,-127, 
  /* [16][0][][] */ 23,101,-46,65,-9,-47,-10,127, 
  /* [17][0][][] */ 23,86,-22,87,-58,75,-127,46, 
  /* [18][0][][] */ 69,-39,127,-33,69,-93,1,-24, 
  /* [19][0][][] */ 24,-21,22,127,37,-36,-48,-89, 
  /* [20][0][][] */ 12,14,-17,35,-5,56,-127,13, 
  /* [21][0][][] */ 19,-6,49,20,30,127,44,-53, 
  /* [22][0][][] */ 70,-127,-16,56,-65,59,12,27, 
  /* [23][0][][] */ -54,-97,-8,-112,-10,-69,1,-127, 
  /* [24][0][][] */ 21,18,-13,-58,-45,-127,-36,43, 
  /* [25][0][][] */ 61,67,127,12,-2,26,-43,-6, 
  /* [26][0][][] */ -110,39,127,-52,-89,-20,97,-9, 
  /* [27][0][][] */ -75,41,-36,-96,37,127,-29,100, 
  /* [28][0][][] */ 26,-113,68,46,52,15,-40,127, 
  /* [29][0][][] */ -121,62,84,-44,-127,11,110,-43, 
  /* [30][0][][] */ 127,-122,11,78,-125,-23,42,-94, 
  /* [31][0][][] */ 54,72,58,-27,-101,-23,3,127, 
  /* [32][0][][] */ -48,-23,103,-49,23,8,-127,-116, 
  /* [33][0][][] */ 54,36,108,-127,18,47,-36,64, 
  /* [34][0][][] */ 2,-125,94,-31,44,127,57,-91, 
  /* [35][0][][] */ 60,3,101,7,25,127,14,-42, 
  /* [36][0][][] */ -5,23,-17,49,66,-127,-8,28, 
  /* [37][0][][] */ 36,-33,64,26,-124,127,-45,-15, 
  /* [38][0][][] */ -106,-33,-94,-19,97,-31,-127,-26, 
  /* [39][0][][] */ 10,3,41,-127,-43,56,-127,8, 
  /* [40][0][][] */ 82,-24,-66,-127,55,61,64,-26, 
  /* [41][0][][] */ 30,-24,-11,127,-94,14,-93,-60, 
  /* [42][0][][] */ -82,28,67,127,-58,-66,-49,3, 
  /* [43][0][][] */ 76,-106,103,43,-127,33,121,51, 
  /* [44][0][][] */ 1,-40,38,-74,-33,127,50,17, 
  /* [45][0][][] */ -39,39,-42,5,70,-53,-127,-42, 
  /* [46][0][][] */ -82,-99,-3,-15,25,127,-44,-106, 
  /* [47][0][][] */ -127,-86,-48,31,16,111,-21,-56, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0045089474879205227, 0.0053158747032284737, 0.0016968701966106892, 0.0015992610715329647, 0.001619187998585403, 0.0015442774165421724, 0.0035003381781280041, 0.00050432712305337191, 0.0028357303235679865, 0.001241578720510006, 0.0020345891825854778, 0.0053994175978004932, 0.0016462182393297553, 0.0023792954161763191, 0.0035049014259129763, 0.0013476333115249872, 0.0015892122173681855, 0.00062904047081246972, 0.0033638107124716043, 0.0043087555095553398, 0.0029287387151271105, 0.0016167731955647469, 0.0018764735432341695, 0.0030617206357419491, 0.0024383070413023233, 0.0030217065941542387, 0.0027091472875326872, 0.0028558673802763224, 0.0021598367020487785, 0.0018027073238044977, 0.0013938340125605464, 0.0032063031103461981, 0.0023247466888278723, 0.0021572234109044075, 0.0011651270324364305, 0.0015031781513243914, 0.00088283780496567488, 0.0017337072640657425, 0.0015499508008360863, 0.0026684056501835585, 0.0023650678340345621, 0.0011575258104130626, 0.0026487391442060471, 0.0014080456458032131, 0.0010894911829382181, 0.0019998368807137012, 0.0022137090563774109, 0.0024962248280644417, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[8] = { -2642, -2011, -12854, 10812, 7366, 129, 7648, 3867, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 9.7732205176725984e-05, 0.00014647968055214733, 6.2754494138062e-05, 0.00014496092626359314, 0.00011496799561427906, 7.5391486461739987e-05, 0.00013449050311464816, 9.0532477770466357e-05, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 21,37,21,34,-5,-31,57,45,-4,26,-22,-8,45,-41,42,-18,-55,-29,-127,-7,47,-40,27,37,9,4,43,-9,-15,-51,2,42,-58,43,47,1,58,75,-66,-46,7,32,-101,-44,35,30,-23,-52, 
  /* [1][0][][] */ -21,-45,11,81,-26,6,-11,-11,22,15,-9,-45,-1,2,18,10,49,24,64,-42,7,34,21,-44,6,-25,-31,-31,-30,4,-11,-9,-22,-24,-101,85,13,20,-127,-29,31,-24,79,24,116,-26,-44,43, 
  /* [2][0][][] */ 2,6,22,-36,-22,-25,-6,127,-48,73,-48,-9,125,-14,49,-23,-58,-73,-11,37,-13,-23,21,-9,-2,60,9,40,14,18,79,32,-64,-21,20,60,9,65,63,-111,38,37,-49,-24,3,29,-3,-6, 
  /* [3][0][][] */ 23,0,-127,-26,15,-6,55,-31,-30,-28,-12,18,-44,-52,35,14,10,45,0,27,-48,13,-54,-17,-41,-55,23,4,-71,-48,-60,24,63,36,-39,13,-46,-3,19,-10,25,-51,-24,19,47,-40,37,-7, 
  /* [4][0][][] */ -1,42,-5,-3,20,-2,-73,-118,-36,27,-18,81,7,-27,-6,65,46,51,-76,2,31,9,-25,-7,45,-1,3,-4,-21,2,-2,-32,13,-24,-127,32,-26,3,33,38,-25,-30,74,45,16,-47,13,10, 
  /* [5][0][][] */ -45,-29,83,6,76,13,59,-14,-127,-6,-110,-25,-84,-88,49,71,-22,29,12,4,36,17,29,-1,-27,12,3,-15,-50,2,-23,-20,-37,33,60,17,-8,64,-34,5,39,-32,-59,51,-18,20,38,31, 
  /* [6][0][][] */ 79,60,-7,33,24,-22,-111,-66,6,9,9,75,-23,-23,4,35,-35,33,23,-3,127,-16,59,124,11,-66,15,-23,-44,-22,-32,-67,62,-27,23,-6,-9,33,-39,30,-47,-57,-61,-42,-20,-54,45,-9, 
  /* [7][0][][] */ 9,50,40,-85,66,-62,-37,-24,7,12,34,19,-39,-1,32,-14,-28,25,-23,56,-62,-12,-11,51,3,-33,-1,42,-18,29,-42,-11,46,-14,-46,-45,-69,18,127,-9,13,-37,-33,-10,47,7,68,2, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0041536185890436172, 0.006225386168807745, 0.0026670659426599741, 0.0061608394607901573, 0.0048861396498978138, 0.0032041380181908607, 0.0057158465497195721, 0.0038476302288472652, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[48] = { -2169, -4171, 3629, -764, 218, -728, 3554, 12748, -6837, 14115, 6570, -3321, 5458, -1628, 6825, -1036, 2394, -1077, 3822, -3276, -4744, -2986, -20041, -1875, 11169, -198, -3514, 909, 7973, 5039, 9542, -2441, -5980, 38, -2913, -4453, 1829, 10368, -3868, 16036, 2327, 497, -4727, -4001, -8935, 15289, -497, 4600, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 5.6128948926925659e-05, 0.00020712125115096569, 0.00018889144121203572, 0.00020680103625636548, 0.00014257660950534046, 0.00034214998595416546, 0.0001834902650443837, 0.00045926752500236034, 0.00020500207028817385, 0.00010710765491239727, 0.00017512847261969, 0.00012719248479697853, 0.00013141965609975159, 0.00025620477390475571, 0.00014154717791825533, 0.00018768240988720208, 0.00043765280861407518, 0.00023384936503134668, 7.4121096986345947e-05, 0.00017551318160258234, 0.00011156481195939705, 0.00011542887659743428, 7.2883165557868779e-05, 0.00028931300039403141, 0.0001023830336635001, 0.00031511325505562127, 8.9924687927123159e-05, 0.0001470336428610608, 0.00017146785103250295, 0.00011667385842883959, 0.00010896325693465769, 0.00018106654169969261, 0.0002633126568980515, 0.00035172989009879529, 0.00029841510695405304, 0.00015051627997308969, 0.00011146118777105585, 7.3597046139184386e-05, 0.0002662382903508842, 9.1904606961179525e-05, 0.00016269864863716066, 0.0002151206717826426, 0.00012767901353072375, 0.00017229431250598282, 0.00024925658362917602, 8.3772247307933867e-05, 0.00014408226707018912, 0.00015582221385557204, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 87,94,41,36,-2,-76,46,35,-50,3,-23,52,64,13,-4,24,43,-45,96,64,71,-12,12,11,-31,-54,73,13,-16,-37,40,52,15,-84,10,14,-19,38,-16,-127,-5,-86,-50,-6,7,-127,58,-127, 127,20,51,-95,71,78,54,-50,-99,-79,37,127,18,-63,-127,50,-10,102,67,46,52,93,111,44,78,-54,7,-127,-121,-16,-127,127,13,-95,-83,127,47,-108,-83,-105,11,127,-74,31,-32,-100,86,44, 88,-2,22,-72,-29,-60,30,27,-46,5,26,36,41,32,43,-6,-49,8,69,72,-21,-25,-87,-9,-24,-55,-42,-28,-33,-84,-2,-10,52,-54,35,23,-59,-61,-2,-105,8,-39,113,-14,-10,-126,19,-48, 
  /* [0][1][][] */ 126,5,13,75,54,79,11,-127,104,-127,-127,-70,22,54,-55,127,-127,103,87,65,11,101,85,-50,-46,127,112,38,46,-7,-102,57,53,100,-75,32,-60,-5,-3,-79,-23,-68,17,-84,48,3,50,-5, 23,127,-127,71,127,77,-127,10,111,-39,1,88,-127,127,-28,14,35,-127,-127,7,127,36,127,-127,-127,90,-20,12,-15,-39,31,-12,127,-27,118,-69,111,-125,127,96,127,50,-112,-3,127,59,-127,-22, 68,-12,4,-127,35,54,14,-82,127,-43,-103,-18,19,45,-58,102,71,-13,25,78,45,-127,47,122,-71,107,-50,-10,46,0,-61,37,-7,77,127,41,-62,-30,-55,-40,-27,-37,127,127,113,-36,74,16, 
  /* [0][2][][] */ 43,62,27,72,-22,-2,31,36,2,-22,16,-10,48,-65,38,-41,-12,30,93,-51,122,-4,6,-71,-91,-61,127,107,11,-88,-43,66,20,47,-16,3,-58,8,6,-4,-20,-64,17,-10,15,-5,39,-41, 88,11,2,30,-34,-127,-9,-75,-10,-46,33,-24,-5,-61,-15,51,0,-48,41,127,100,72,74,40,16,-44,-58,70,-127,-24,-71,17,31,127,-58,13,-99,-127,30,-17,-102,79,-12,20,-19,-110,72,-12, 21,0,27,-52,-6,-8,35,46,-13,13,29,4,46,-46,51,-30,-4,-34,63,-117,25,-57,-87,61,-61,-61,-93,43,-4,-127,11,16,38,-34,-5,30,-127,-71,-26,-39,-22,-14,-3,11,-12,19,-18,-47, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0028920762706547976, 0.010672041215002537, 0.0097327399998903275, 0.010655541904270649, 0.0073463413864374161, 0.017629474401473999, 0.0094544412568211555, 0.023664021864533424, 0.01056284923106432, 0.0055187833495438099, 0.0090235946699976921, 0.0065536657348275185, 0.0067714727483689785, 0.013201097026467323, 0.0072932997718453407, 0.0096704438328742981, 0.0225503109395504, 0.012049222365021706, 0.0038191319908946753, 0.009043416939675808, 0.0057484409771859646, 0.0059475391171872616, 0.0037553468719124794, 0.014907018281519413, 0.0052753444761037827, 0.016236390918493271, 0.0046334210783243179, 0.0075759929604828358, 0.0088349794968962669, 0.0060116872191429138, 0.0056143943220376968, 0.0093295574188232422, 0.013567334972321987, 0.018123084679245949, 0.015376009978353977, 0.0077554378658533096, 0.005743101704865694, 0.003792129922658205, 0.013718079775571823, 0.0047354376874864101, 0.0083831408992409706, 0.011084215715527534, 0.0065787346102297306, 0.0088775632902979851, 0.012843088246881962, 0.0043164128437638283, 0.0074239214882254601, 0.008028828538954258, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[48] = { -1235, -1503, 3193, -499, -1971, 2455, 2283, 18211, 2991, 2674, 4335, 2807, 1674, 8038, 4773, -1964, 16266, 1739, 614, -2216, -243, -289, 1740, 9318, 931, 5924, 2675, -132, 8306, 36, 1881, -1234, -1526, -3003, -6658, 1099, 4101, 1977, 2221, 2943, 2212, 765, 5305, 1808, 10565, 3530, -1420, 677, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00025485089281573892, 0.00029411283321678638, 0.00021966551139485091, 0.00014115727390162647, 0.00024556103744544089, 0.00010650196054484695, 0.00024466321337968111, 6.6875982156489044e-05, 0.00011730984988389537, 0.00021430595370475203, 0.00018130266107618809, 0.0001431597484042868, 0.00021795548673253506, 0.00010148315050173551, 0.00015237262414302677, 0.00022695618099533021, 6.4017949625849724e-05, 0.00014820785145275295, 0.00034787354525178671, 0.00026596855605021119, 9.5644354587420821e-05, 0.00037507273373194039, 0.00021289403957780451, 0.00010051800927612931, 0.00025528491823934019, 0.00010678666149033234, 0.00021725092665292323, 0.00021403227583505213, 6.2701437855139375e-05, 0.00047450669808313251, 0.00012287918070796877, 0.00030092406086623669, 0.00030594356940127909, 0.0001041005743900314, 7.5558789831120521e-05, 0.00032839199411682785, 0.00011212057142984122, 0.00018383160931989551, 0.00018991911201737821, 0.00016211604815907776, 0.00028128517442382872, 0.00027704276726581156, 0.0001322633761446923, 0.00024882450816221535, 8.2833656051661819e-05, 0.00019358407007530332, 0.00011158931738464162, 0.00027643304201774299, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -19,-42,-48,91,6,-65,-78,-127, 
  /* [1][0][][] */ 127,-21,38,-28,29,-78,3,32, 
  /* [2][0][][] */ -11,45,5,-127,12,96,-63,66, 
  /* [3][0][][] */ -24,127,-44,-106,-117,2,26,-86, 
  /* [4][0][][] */ 9,-83,-107,-47,31,-88,-75,-127, 
  /* [5][0][][] */ -44,-93,93,62,26,127,37,-117, 
  /* [6][0][][] */ -2,12,-55,50,-1,4,-127,-48, 
  /* [7][0][][] */ 15,-13,5,16,-51,52,127,54, 
  /* [8][0][][] */ 5,34,-84,-20,-58,-127,-88,78, 
  /* [9][0][][] */ 72,-7,-41,-31,-1,127,-38,117, 
  /* [10][0][][] */ -10,41,79,127,96,103,-12,-37, 
  /* [11][0][][] */ -24,-52,-8,31,-127,75,-12,-22, 
  /* [12][0][][] */ -23,50,88,-62,77,-121,-127,-78, 
  /* [13][0][][] */ 54,18,-82,-125,-47,-70,-92,127, 
  /* [14][0][][] */ -57,-117,12,-82,-5,-76,36,-127, 
  /* [15][0][][] */ 8,62,72,88,80,127,-3,-29, 
  /* [16][0][][] */ 39,4,-28,-127,65,112,-84,88, 
  /* [17][0][][] */ -94,82,-103,11,22,127,-73,46, 
  /* [18][0][][] */ -127,69,23,-34,-91,28,-15,-4, 
  /* [19][0][][] */ 127,-3,-40,-23,87,-67,60,-80, 
  /* [20][0][][] */ 127,-63,47,-47,-80,30,114,-4, 
  /* [21][0][][] */ 24,-38,-27,38,-9,30,127,32, 
  /* [22][0][][] */ 85,48,-127,-100,3,114,88,113, 
  /* [23][0][][] */ -16,29,-39,-87,33,2,-127,12, 
  /* [24][0][][] */ 127,-57,-78,-20,87,-48,11,38, 
  /* [25][0][][] */ -35,-80,75,-35,92,127,-43,-96, 
  /* [26][0][][] */ 28,-67,52,38,127,-69,-72,-81, 
  /* [27][0][][] */ -13,-127,71,80,11,-8,-39,117, 
  /* [28][0][][] */ -23,61,-110,-51,121,-97,-31,127, 
  /* [29][0][][] */ -80,30,127,-96,23,-41,35,38, 
  /* [30][0][][] */ 111,-76,90,-44,-81,-127,79,-42, 
  /* [31][0][][] */ 31,23,47,0,-25,-13,-127,12, 
  /* [32][0][][] */ 19,-14,19,127,-34,-88,-42,-85, 
  /* [33][0][][] */ 127,-98,-64,117,-120,105,-61,-28, 
  /* [34][0][][] */ 27,-92,13,-59,-94,127,37,-33, 
  /* [35][0][][] */ 23,127,92,8,11,28,-55,-8, 
  /* [36][0][][] */ 38,88,-60,-127,-99,18,87,-82, 
  /* [37][0][][] */ 36,-1,43,17,37,127,66,15, 
  /* [38][0][][] */ -57,-96,100,46,34,0,-69,127, 
  /* [39][0][][] */ 16,30,127,-37,-26,36,-30,27, 
  /* [40][0][][] */ 14,6,19,-5,3,-22,127,-4, 
  /* [41][0][][] */ -9,-27,-60,-127,-61,-86,-81,44, 
  /* [42][0][][] */ 48,-1,61,-45,-127,-53,-51,27, 
  /* [43][0][][] */ 67,-5,27,38,-54,-127,115,36, 
  /* [44][0][][] */ -85,-114,-14,-73,-14,10,-1,-127, 
  /* [45][0][][] */ 13,98,71,51,33,127,-48,16, 
  /* [46][0][][] */ -91,-18,-2,75,92,39,-85,127, 
  /* [47][0][][] */ 27,75,-57,-35,4,-42,29,-127, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0037607874255627394, 0.0043401685543358326, 0.0032415632158517838, 0.0020830316934734583, 0.0036236988380551338, 0.0015716296620666981, 0.003610449843108654, 0.00098687643185257912, 0.0017311197007074952, 0.0031624732073396444, 0.0026754497084766626, 0.0021125818602740765, 0.0032163285650312901, 0.0014975679805502295, 0.0022485344670712948, 0.0033491502981632948, 0.00094470102339982986, 0.0021870757918804884, 0.0051335054449737072, 0.0039248485118150711, 0.0014114059740677476, 0.0055348789319396019, 0.0031416378915309906, 0.0014833256136626005, 0.00376719213090837, 0.0015758309746161103, 0.0032059315126389265, 0.0031584345269948244, 0.00092527351807802916, 0.007002207450568676, 0.0018133051926270127, 0.0044406806118786335, 0.004514752421528101, 0.0015361928381025791, 0.0011150070931762457, 0.0048460196703672409, 0.0016545425169169903, 0.0027127689681947231, 0.002802601084113121, 0.0023923164699226618, 0.0041508730500936508, 0.0040882686153054237, 0.0019517859909683466, 0.0036718572955578566, 0.0012223608791828156, 0.0028566841501742601, 0.0016467028763145208, 0.0040792711079120636, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[8] = { 17762, 3246, 15701, -5689, -14808, 10951, 5575, 19073, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 9.4307266408577561e-05, 8.5109175415709615e-05, 8.9162291260436177e-05, 8.0165104009211063e-05, 8.1802798376884311e-05, 0.00010120419756276533, 5.9505509852897376e-05, 8.7034044554457068e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-19,-16,-2,-17,-80,-45,-16,47,-33,-53,-33,-33,86,-51,3,10,-9,10,10,23,-34,11,9,45,0,0,26,12,58,-41,-99,15,-54,9,-38,40,-53,-10,27,-67,-33,-27,-54,-92,-102,13,-32, 
  /* [1][0][][] */ -74,-5,99,-71,57,45,54,25,-9,10,-3,115,33,-41,-127,-56,-103,-100,27,-20,18,101,-46,5,12,-98,40,109,38,-20,31,54,53,43,-3,44,-85,-16,31,13,16,-26,-99,27,-8,-44,-113,35, 
  /* [2][0][][] */ 86,47,-24,-55,-39,-8,-42,-82,24,29,-80,-54,-15,65,-63,37,-16,79,15,7,47,46,-5,1,-112,13,30,-46,-3,22,39,-86,10,-38,25,12,-43,-54,10,29,-127,-106,-33,-55,-49,-100,30,17, 
  /* [3][0][][] */ 12,4,25,33,-100,-29,-11,50,-38,-56,-5,72,10,-15,-80,-50,-36,32,9,-61,-52,127,13,-57,30,37,50,-51,22,12,14,18,32,17,13,-12,49,50,19,-3,28,-24,22,-51,-20,3,30,39, 
  /* [4][0][][] */ -52,12,-121,14,-8,96,13,32,-37,127,38,64,14,-71,-15,30,-16,-2,-17,30,-18,39,-72,32,4,-4,56,-12,41,-63,120,90,62,52,5,-55,-82,9,6,-30,48,21,28,33,43,24,24,59, 
  /* [5][0][][] */ -34,5,36,-3,60,-71,-40,-30,-43,-61,10,-37,41,7,-15,5,23,-4,11,29,11,59,17,15,18,-8,-39,-9,-34,-7,-127,-19,-48,-13,27,-26,2,-37,1,-20,-19,-2,-35,-15,26,27,-3,43, 
  /* [6][0][][] */ 12,46,-10,60,-22,40,-57,45,-71,-39,53,22,60,-1,43,16,7,-56,-47,39,13,71,35,-38,-102,-2,-37,32,-100,-2,-100,8,6,-33,-51,-49,127,2,-39,-65,64,45,34,-49,-73,-11,-70,-40, 
  /* [7][0][][] */ -61,20,-92,34,-19,-10,-14,-16,-79,-45,41,58,46,25,-70,-73,-60,90,4,-9,37,10,30,-49,-44,96,-57,-102,-50,-22,-108,-19,-33,-41,-55,-11,-17,-48,-59,-15,-37,46,47,-21,-77,-75,127,-62, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0040941997431218624, 0.0036948793567717075, 0.0038708390202373266, 0.003480240236967802, 0.0035513383336365223, 0.0043936190195381641, 0.0025833370164036751, 0.0037784443702548742, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[48] = { 5368, 5112, 11959, 7732, 42593, -1879, 609, 133, 1031, -13920, -3044, -1644, 18398, 6188, 7105, 1667, 8673, 11401, -6, -5305, 7381, -3068, 10886, -576, 7082, 13285, -1042, -398, 540, 2279, 9938, 4139, 2402, -2295, -367, 2412, 10297, 6110, 2874, 1458, 12403, -9816, 6153, 707, 1072, 2179, 9763, -2996, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00020725184003822505, 0.00017665680206846446, 7.1551163273397833e-05, 0.00018325621203985065, 4.6808792831143364e-05, 0.00034303168649785221, 0.00018357862427365035, 0.00035911740269511938, 0.00031881520408205688, 0.00018978319712914526, 9.6424300863873214e-05, 0.00027478858828544617, 7.6386466389521956e-05, 0.00020401229267008603, 0.00030633193091489375, 0.00010674157238099724, 9.3613947683479637e-05, 0.00013904397201258689, 0.00044039022759534419, 0.00017196874250657856, 0.00011087191523984075, 0.00014695050776936114, 0.00012088748189853504, 0.00013620867684949189, 0.0001660946145420894, 9.6588155429344624e-05, 0.00028296851087361574, 0.0002585324109531939, 0.00023679052537772804, 0.00033909830381162465, 0.00014970911433920264, 0.00031785509781911969, 0.00021157794981263578, 0.00079470989294350147, 0.00011127865582238883, 0.00015863383305259049, 0.00018082567839883268, 0.00016376032726839185, 0.00013621397374663502, 0.00019901516498066485, 0.00011700919276336208, 0.00013293858501128852, 0.00017949368339031935, 0.0003628751146607101, 0.00028580037178471684, 0.00031589998980052769, 0.00017146910249721259, 0.00020485511049628258, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -88,-25,50,-6,-127,12,-127,-5,-9,127,61,6,-66,68,5,32,35,16,31,-25,-117,-15,22,63,-31,0,-4,-61,25,-112,96,29,-11,33,60,-41,11,-127,-35,127,-87,40,-13,-5,-15,9,0,-3, 28,-127,-16,25,-80,22,-111,-17,24,22,127,66,-58,-66,-107,-62,-5,-60,127,92,12,66,-51,31,-63,-11,2,-127,8,-69,-21,-127,-18,15,-37,-127,-21,-11,10,92,127,-23,-22,127,2,-127,-9,-27, -127,-7,35,0,-109,9,-86,-8,-4,115,3,-18,-50,68,16,53,-48,-10,23,-27,-107,-20,24,20,1,-24,10,-38,-37,-127,44,-9,6,21,-36,-42,16,-84,8,88,-80,38,-13,12,6,16,-3,49, 
  /* [0][1][][] */ 59,-13,26,-5,-94,0,48,-26,-64,49,34,35,-84,-31,-80,120,-27,-11,60,126,10,46,-91,-3,-46,-103,-12,-62,127,24,46,106,-127,-4,100,1,-12,27,-127,-123,50,-16,9,11,-127,44,-13,-54, 119,-35,-127,-127,46,127,-17,127,-127,-98,-27,127,-49,-127,-127,-127,-22,-127,-67,80,127,127,-76,95,-127,57,-117,86,-69,-40,-127,-87,5,127,-127,90,-127,-52,118,-52,-54,127,-127,-85,88,87,-127,-75, 33,5,69,7,-51,-33,1,-33,-39,30,15,-22,-40,-51,-67,108,-127,-54,31,127,-19,55,-30,-127,14,-82,127,0,-56,83,-53,105,106,-40,-46,6,-11,-5,-16,-66,27,-8,-12,-9,2,33,-32,127, 
  /* [0][2][][] */ -99,-12,42,-17,-36,6,88,-8,74,51,70,4,-63,67,25,-16,50,33,14,-20,-53,-24,19,29,-39,-20,-6,17,5,23,84,-11,-10,19,91,12,14,-43,-61,-7,-59,30,8,-17,-10,-18,-33,8, -57,-74,57,-37,-53,-15,124,-4,88,37,99,-40,118,-76,-78,-35,-60,22,-124,30,-84,9,-127,-14,17,-127,-5,42,1,47,13,-77,3,-39,-4,22,-12,51,40,-68,-14,24,27,-46,18,-27,-24,13, -80,-7,28,1,-76,24,40,-7,33,18,21,17,-127,49,27,-8,-67,36,8,-27,-48,-19,78,-58,-17,-32,16,39,-21,19,28,-39,-4,28,-19,5,18,-40,-6,-52,-44,58,18,0,-9,4,-9,-5, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.010972335003316402, 0.0093525713309645653, 0.0037880642339587212, 0.009701956994831562, 0.0024781529791653156, 0.018160795792937279, 0.0097190262749791145, 0.019012406468391418, 0.016878725960850716, 0.010047509334981441, 0.0051048989407718182, 0.014547867700457573, 0.0040440550073981285, 0.010800826363265514, 0.016217837110161781, 0.0056511163711547852, 0.0049561131745576859, 0.0073612714186310768, 0.023315155878663063, 0.0091043757274746895, 0.0058697853237390518, 0.0077798590064048767, 0.0064000296406447887, 0.0072111650370061398, 0.0087933875620365143, 0.005113573744893074, 0.014980929903686047, 0.013687233440577984, 0.01253617275506258, 0.017952555790543556, 0.0079259052872657776, 0.016827896237373352, 0.01120136771351099, 0.042073562741279602, 0.0058913188986480236, 0.008398398756980896, 0.0095732798799872398, 0.0086698057129979134, 0.007211445365101099, 0.010536268353462219, 0.0061947051435709, 0.0070380396209657192, 0.0095027610659599304, 0.01921134814620018, 0.015130854211747646, 0.016724389046430588, 0.009077923372387886, 0.010845446959137917, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[48] = { 18382, -256, 643, 1633, 4211, 836, 9256, -572, 10995, 10320, -873, -121, 2224, 1832, 931, 2698, 3942, 3549, -2515, -1098, 2412, 3173, 4282, 107, 3792, 2072, 4452, -778, 5795, -318, 7946, 8233, 3341, 1047, 1053, 1858, 3568, 1883, 1950, 2492, 31, 3248, 1979, 5362, 6253, 2918, 365, 2262, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 5.3963169193593785e-05, 0.00040998312761075795, 0.00057061371626332402, 0.00019627042638603598, 0.00018172342970501631, 0.00013375189155340195, 7.2103233833331615e-05, 0.00019792946113739163, 8.2316109910607338e-05, 7.2472408646717668e-05, 0.00015396779053844512, 0.00016361051530111581, 0.00023231736849993467, 0.00020919278904329985, 7.7167082054074854e-05, 0.0002313101285835728, 0.00012508692452684045, 0.00022134691243991256, 0.00016107088595163077, 0.00011065437138313428, 0.00030772440368309617, 0.00010959425708279014, 0.00015316772623918951, 0.00031097306055016816, 0.00017402868252247572, 0.00029912131140008569, 0.00019732507644221187, 0.00036373705370351672, 0.00015565010835416615, 0.00011414549953769892, 9.6597352239768952e-05, 7.5442025263328105e-05, 0.0002602277381811291, 9.8343225545249879e-05, 0.00029616514802910388, 0.00038469323772005737, 0.00017683985061012208, 0.00021886291506234556, 0.00028639932861551642, 0.00011679583985824138, 0.00023138786491472274, 0.00020973889331799001, 0.00036142690805718303, 0.00013069990382064134, 0.00014620812726207078, 0.00011666315549518913, 0.00027655318262986839, 0.00029678680584765971, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 88,-105,57,-12,38,-127,-7,-104, 
  /* [1][0][][] */ -55,-62,-81,79,-127,47,-21,24, 
  /* [2][0][][] */ 63,-47,56,-31,127,-13,-15,62, 
  /* [3][0][][] */ -5,125,-15,127,20,3,-57,-41, 
  /* [4][0][][] */ -33,127,65,-26,50,8,-74,31, 
  /* [5][0][][] */ -92,28,2,22,127,-30,96,-14, 
  /* [6][0][][] */ 105,-64,116,13,38,127,69,-30, 
  /* [7][0][][] */ -38,-39,38,60,65,9,-38,127, 
  /* [8][0][][] */ 22,-19,-29,-87,4,127,-59,10, 
  /* [9][0][][] */ -127,27,-87,-8,98,-33,-52,7, 
  /* [10][0][][] */ -19,-81,55,23,-42,-88,-127,-93, 
  /* [11][0][][] */ 45,79,-18,-1,-27,-75,27,127, 
  /* [12][0][][] */ 51,-68,-117,74,-89,127,62,116, 
  /* [13][0][][] */ -49,-20,-127,32,-90,76,26,40, 
  /* [14][0][][] */ -56,127,-90,93,104,41,-22,87, 
  /* [15][0][][] */ -84,-12,-12,-10,87,77,-64,-127, 
  /* [16][0][][] */ 96,-127,-121,-42,-70,113,-69,-25, 
  /* [17][0][][] */ 13,127,-110,-43,-87,24,78,-122, 
  /* [18][0][][] */ -83,-121,46,31,127,-81,-35,71, 
  /* [19][0][][] */ -76,109,-23,31,2,-99,-127,47, 
  /* [20][0][][] */ 69,-12,28,-64,5,-63,20,127, 
  /* [21][0][][] */ 69,-48,127,110,-34,116,83,-23, 
  /* [22][0][][] */ -34,110,17,8,127,-71,-126,-79, 
  /* [23][0][][] */ 29,-47,21,127,-1,-60,59,-23, 
  /* [24][0][][] */ -41,70,127,-68,-21,-34,22,-27, 
  /* [25][0][][] */ -60,-127,107,59,31,-2,-36,124, 
  /* [26][0][][] */ 77,-22,-127,-110,-99,54,25,111, 
  /* [27][0][][] */ 40,123,-97,-61,-56,22,29,-127, 
  /* [28][0][][] */ -17,39,-45,-86,-6,-35,-127,-41, 
  /* [29][0][][] */ -93,54,-127,-50,113,55,-42,-3, 
  /* [30][0][][] */ 87,-57,12,-34,-119,124,127,65, 
  /* [31][0][][] */ -61,88,-30,69,127,-89,-7,9, 
  /* [32][0][][] */ 6,81,42,-53,127,-47,-20,-75, 
  /* [33][0][][] */ -127,51,-115,15,43,26,-31,11, 
  /* [34][0][][] */ 57,-18,56,-63,-37,-127,73,101, 
  /* [35][0][][] */ -127,23,44,-8,-74,-12,-12,10, 
  /* [36][0][][] */ 3,-52,-42,43,-10,4,127,41, 
  /* [37][0][][] */ -32,-17,-74,-43,-29,-127,-63,-7, 
  /* [38][0][][] */ -126,29,14,38,-127,9,52,25, 
  /* [39][0][][] */ -40,-37,29,-23,-15,79,-127,-105, 
  /* [40][0][][] */ 80,-127,17,81,-54,-67,126,77, 
  /* [41][0][][] */ 8,127,80,43,25,30,-92,-30, 
  /* [42][0][][] */ 35,127,-29,-14,-33,19,-8,-55, 
  /* [43][0][][] */ -58,64,-88,-127,20,33,-53,69, 
  /* [44][0][][] */ -56,25,-30,18,49,127,-22,-2, 
  /* [45][0][][] */ 1,67,-84,-31,-58,-79,-26,127, 
  /* [46][0][][] */ 20,114,-102,-31,-67,26,-1,-127, 
  /* [47][0][][] */ 22,4,-7,-62,-69,-127,-27,40, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.00086325447773560882, 0.0065585430711507797, 0.0091281672939658165, 0.0031397587154060602, 0.0029070489108562469, 0.0021396430674940348, 0.0011534430086612701, 0.0031662983819842339, 0.0013168194564059377, 0.0011593487579375505, 0.0024630390107631683, 0.002617294667288661, 0.0037164054811000824, 0.0033464790321886539, 0.0012344499118626118, 0.0037002924364060163, 0.0020010287407785654, 0.0035409098491072655, 0.0025766678154468536, 0.0017701495671644807, 0.004922699648886919, 0.0017531908815726638, 0.0024502403102815151, 0.0049746688455343246, 0.0027839550748467445, 0.0047850748524069786, 0.0031566300895065069, 0.0058187399990856647, 0.0024899512063711882, 0.001825997605919838, 0.0015452780062332749, 0.0012068540090695024, 0.0041628903709352016, 0.0015732069732621312, 0.0047377850860357285, 0.0061539784073829651, 0.0028289256151765585, 0.0035011731088161469, 0.004581560380756855, 0.0018683953676372766, 0.0037015359848737717, 0.0033552150707691908, 0.0057817841880023479, 0.0020908201113343239, 0.0023389067500829697, 0.0018662727670744061, 0.0044240504503250122, 0.0047477297484874725, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[8] = { 5998, -2605, -2320, 5086, 2929, -15667, -5259, -8170, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00021793386258650571, 0.00017121652490459383, 0.00017914723139256239, 0.00011305845691822469, 0.00017050447058863938, 7.7791628427803516e-05, 0.00017853266035672277, 0.00011750266276067123, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -22,14,3,34,-14,9,-3,24,-51,-5,-35,-1,-13,17,28,3,-47,-23,34,-20,-25,127,-20,-20,-20,-34,9,31,-35,37,5,-28,-10,19,31,36,16,-1,26,-25,7,-28,-19,-15,-22,22,18,10, 
  /* [1][0][][] */ 7,60,7,43,29,38,45,120,-41,-47,82,-36,-42,-36,34,-23,-15,4,33,7,29,-127,-3,-66,4,8,-20,15,-6,7,-30,-54,-34,-1,21,-12,22,68,72,-15,20,17,43,-26,-32,45,11,52, 
  /* [2][0][][] */ -1,22,-2,30,27,16,-27,30,15,13,63,20,8,-10,28,-47,18,23,-7,8,-14,127,7,-11,23,-37,0,1,-20,33,-22,-59,-18,10,19,-38,28,-16,-32,-26,27,-14,-7,-46,-34,35,8,13, 
  /* [3][0][][] */ -40,49,-5,6,-22,32,59,-2,-1,8,3,21,-19,36,43,15,-19,-1,6,0,40,-83,-13,18,-15,4,-127,27,-39,-27,-13,5,-43,-9,11,33,29,-14,-43,-36,-4,-18,7,16,17,-12,41,16, 
  /* [4][0][][] */ 17,2,-41,5,24,-9,20,-13,-50,10,-2,21,3,-16,-20,13,-26,35,-13,-6,6,-127,-8,-7,30,27,30,-40,42,-11,3,9,-14,45,27,-8,-25,15,-12,6,-12,-60,-83,19,33,32,1,-7, 
  /* [5][0][][] */ -5,41,76,18,0,26,24,-120,63,-34,-24,3,105,-61,-16,14,13,-45,39,-4,-34,127,17,1,95,11,101,44,98,71,-10,-42,-80,-40,107,47,-52,-57,3,-112,19,-22,62,61,-56,-52,-38,-37, 
  /* [6][0][][] */ 65,1,-27,7,45,-16,47,-38,59,33,5,-43,-11,48,36,-73,29,-122,-25,-13,28,-12,0,34,-41,-42,40,-21,67,-42,127,53,55,37,30,-60,-53,18,75,-31,-27,26,-67,72,38,12,46,-44, 
  /* [7][0][][] */ -8,39,46,62,-1,15,55,89,49,27,-4,75,-56,-4,23,-18,81,-22,-30,-20,-8,-127,-4,-104,-66,81,60,13,6,32,13,-30,15,-20,18,28,-26,94,-93,-37,14,2,23,-18,-57,-3,35,8, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0092621892690658569, 0.007276702206581831, 0.0076137571595609188, 0.004804984200745821, 0.0072464398108422756, 0.0033061441499739885, 0.0075876377522945404, 0.0049938629381358624, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 20140, 21198, 9557, 20545, 7895, 8699, 18060, 10970, 53662, -2001, 2196, 22422, 14415, -4332, 10881, 607, 3763, 26924, 19313, 2699, 4640, -8878, 310, 2464, 49311, 34941, 1407, 655, -3224, 15253, -3313, 1316, -12973, 14386, 28894, 27152, 24858, 21151, -733, -1389, 5509, 49432, 2020, -2149, -886, -1645, 20070, 9587, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 5.9952384617645293e-05, 8.3096922026015818e-05, 0.00011699651076924056, 7.405989890685305e-05, 0.00011014938354492188, 0.00011859017831739038, 0.00012501826859079301, 0.00012385418813209981, 3.5441022191662341e-05, 0.00010618739906931296, 6.6619613789953291e-05, 5.6311433581868187e-05, 0.00015699831419624388, 7.4247502197977155e-05, 8.2393773482181132e-05, 7.7249700552783906e-05, 3.4686265280470252e-05, 7.8200937423389405e-05, 6.4724197727628052e-05, 0.00014846456178929657, 5.1611295930342749e-05, 0.00029113999335095286, 9.1224479547236115e-05, 8.7252643425017595e-05, 3.3183641789946705e-05, 5.4219650337472558e-05, 7.4094983574468642e-05, 0.00013774956460110843, 6.5055632148869336e-05, 0.00010590324382064864, 0.00018032266234513372, 0.00016357787535525858, 8.2144782936666161e-05, 8.5555271652992815e-05, 9.7849049780052155e-05, 0.00012594851432368159, 9.3945469416212291e-05, 0.00013772344391327351, 0.00015572909615002573, 9.4018054369371384e-05, 0.00017729276441968977, 3.1569568818667904e-05, 8.1654441601131111e-05, 6.2753002566751093e-05, 0.0003539873578120023, 0.00012847589096054435, 6.0663882322842255e-05, 8.9019711595028639e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -44,-73,-29,-87,-21,24,-63,-83,-48,61,50,-108,-33,23,-84,51,90,-71,-61,85,35,51,-65,97,-81,-45,76,62,66,-85,97,73,41,-43,-77,-48,-127,-67,127,48,-3,-11,21,82,102,116,-38,-59, -71,-111,-62,-112,-127,8,-88,-105,-68,109,85,-127,-64,63,-112,94,107,-104,-111,-17,74,89,107,124,-91,-91,102,78,104,-94,90,86,78,-74,-93,-76,-101,-86,123,85,-56,-83,63,99,61,115,-101,-96, -38,-41,-52,-46,-106,25,-59,-71,-67,53,54,-53,-19,54,-96,35,58,-37,-34,-57,34,-127,-83,39,-54,-32,31,22,57,-28,57,39,28,-46,-56,-39,-70,-49,43,41,-9,-60,28,55,16,74,-46,-22, 
  /* [0][1][][] */ -54,-95,-58,-95,-61,-16,-99,-102,-80,89,72,-108,-69,63,-127,68,105,-85,-72,92,110,70,-77,108,-113,-64,85,95,84,-109,111,88,70,-83,-121,-75,-117,-90,96,108,-79,-53,49,90,127,127,-54,-94, -127,-127,-127,-127,-119,-127,-127,-127,-127,127,127,-118,-127,127,-87,127,127,-127,-127,-68,127,78,127,127,-127,-127,127,127,127,-127,127,127,127,-127,-127,-127,-124,-127,103,127,-127,-127,127,127,118,109,-127,-127, -57,-33,-76,-58,-117,-104,-93,-102,-83,95,66,-61,-62,88,-101,45,104,-43,-59,-127,81,-126,-112,48,-50,-50,40,35,76,-53,70,58,53,-81,-81,-68,-73,-70,58,56,-51,-81,51,81,16,30,-60,-49, 
  /* [0][2][][] */ -16,-12,-32,-52,-75,-7,-49,-28,-72,59,37,-58,-17,13,-94,12,46,-19,-25,31,64,39,-26,48,-31,-15,16,26,51,-32,41,33,31,-53,-45,-47,-26,-11,24,69,-40,-64,23,39,70,44,-28,0, -53,-16,-80,-58,-98,-121,-74,-40,-98,85,44,-78,-38,59,-87,45,66,-12,-42,-67,81,19,60,26,-31,-57,30,51,74,-45,43,38,63,-86,-76,-85,-33,-34,26,68,-67,-86,73,72,34,5,-77,-26, -26,21,-53,-27,-39,-112,-61,-59,-40,71,23,-53,-10,42,-3,15,62,-10,-35,-86,51,-45,-56,20,4,-15,-5,15,49,-16,25,21,22,-56,-52,-40,-13,-27,36,37,-38,-63,30,37,21,6,-24,-17, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0025479763280600309, 0.0035316189751029015, 0.0049723517149686813, 0.0031475455034524202, 0.0046813488006591797, 0.0050400826148688793, 0.0053132763132452965, 0.005263802595436573, 0.0015062434831634164, 0.0045129642821848392, 0.0028313335496932268, 0.0023932359181344509, 0.0066724279895424843, 0.003155518788844347, 0.0035017351619899273, 0.0032831123098731041, 0.0014741662889719009, 0.0033235396258533001, 0.0027507783379405737, 0.0063097439706325531, 0.0021934800315648317, 0.01237344928085804, 0.0038770402316004038, 0.0037082373164594173, 0.0014103048015385866, 0.0023043351247906685, 0.0031490367837250233, 0.0058543565683066845, 0.0027648643590509892, 0.0045008878223598003, 0.0076637133024632931, 0.0069520594552159309, 0.0034911532420665026, 0.0036360989324748516, 0.004158584401011467, 0.0053528118878602982, 0.0039926823228597641, 0.0058532464317977428, 0.0066184862516820431, 0.0039957673288881779, 0.007534942589700222, 0.001341706607490778, 0.003470313735306263, 0.0026670026127249002, 0.015044461935758591, 0.0054602255113422871, 0.0025782149750739336, 0.0037833377718925476, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 701, 2104, 1539, -53, -440, 154, 6430, 2717, 1454, -3563, 1248, 5, 4450, 48, 819, -1163, -109, 3387, 634, 1174, -325, 37822, 1288, -1088, 974, 3078, 2001, -1377, -22, 251, -1556, -1127, 2083, 920, 4724, 6321, 3016, 5333, -2427, -1004, -580, 1860, 903, 386, -1342, -2014, 2657, 674, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00028263722197152674, 0.00031325567397288978, 0.00027872613281942904, 0.00050304504111409187, 0.00032723206095397472, 0.00028237339574843645, 0.00013021046470385045, 0.00022165583504829556, 0.00031675916397944093, 0.00015459053975064307, 0.00029362551867961884, 0.00040856568375602365, 0.00014997344987932593, 0.00059010193217545748, 0.00050899595953524113, 0.00029068993171676993, 0.00075083097908645868, 0.00018359337991569191, 0.0003098155721090734, 0.00031946061062626541, 0.00037172797601670027, 4.396598887979053e-05, 0.00034758812398649752, 0.00025254889624193311, 0.00032171470229513943, 0.00022393140534404665, 0.0002867365546990186, 0.00033511218498460948, 0.00043358185212127864, 0.00045755377504974604, 0.00025821899180300534, 0.00025991603615693748, 0.00034036920988000929, 0.0003815427771769464, 0.00018700714281294495, 0.00014867613208480179, 0.00029112276388332248, 0.0001585165155120194, 0.00023255251289810985, 0.00024825904984027147, 0.00043302503763698041, 0.00030445394804701209, 0.00026267292560078204, 0.00045945408055558801, 0.00027976249111816287, 0.00024363378179259598, 0.00022441963665187359, 0.000265512615442276, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ -31,68,-60,57,36,127,38,19, 
  /* [1][0][][] */ 55,-127,-88,-37,-38,65,57,-36, 
  /* [2][0][][] */ -63,70,-44,-127,-50,-127,-30,-69, 
  /* [3][0][][] */ -19,127,62,29,-3,-81,-25,20, 
  /* [4][0][][] */ -103,46,-127,106,13,-22,-58,-74, 
  /* [5][0][][] */ 108,-102,-127,30,7,-11,78,-41, 
  /* [6][0][][] */ -10,-98,-69,7,-127,-49,-60,87, 
  /* [7][0][][] */ -15,-43,-13,-42,54,5,-28,127, 
  /* [8][0][][] */ 6,27,-87,-100,33,-26,-127,-82, 
  /* [9][0][][] */ -127,69,-9,118,0,83,97,5, 
  /* [10][0][][] */ -34,-7,92,-127,-30,69,24,41, 
  /* [11][0][][] */ 107,-26,94,37,-37,47,74,127, 
  /* [12][0][][] */ 49,53,34,-45,57,127,110,-125, 
  /* [13][0][][] */ 39,56,-37,66,-8,-127,-40,59, 
  /* [14][0][][] */ 14,-127,-29,-27,11,75,40,-41, 
  /* [15][0][][] */ -104,-16,-4,-83,57,127,-86,-42, 
  /* [16][0][][] */ 8,-42,107,13,-13,18,127,67, 
  /* [17][0][][] */ 82,30,74,26,-23,-96,-33,-127, 
  /* [18][0][][] */ -116,18,-77,-16,-5,-127,19,-93, 
  /* [19][0][][] */ 72,17,127,-9,-70,41,112,121, 
  /* [20][0][][] */ 21,127,50,-8,26,35,41,2, 
  /* [21][0][][] */ -39,27,40,-117,-62,127,-15,-2, 
  /* [22][0][][] */ 31,-8,88,-7,-40,16,127,98, 
  /* [23][0][][] */ -76,109,47,45,-84,-89,-110,127, 
  /* [24][0][][] */ -3,-20,98,26,-118,127,-14,-84, 
  /* [25][0][][] */ -40,16,79,18,-127,50,-84,32, 
  /* [26][0][][] */ -37,-127,35,-48,15,39,-15,-12, 
  /* [27][0][][] */ -34,79,29,53,-26,127,-26,-14, 
  /* [28][0][][] */ 16,-112,55,30,51,127,45,40, 
  /* [29][0][][] */ 19,127,-20,27,-68,-69,-21,10, 
  /* [30][0][][] */ -54,69,104,89,-127,-83,-45,-121, 
  /* [31][0][][] */ 14,61,25,57,-46,-18,13,-127, 
  /* [32][0][][] */ -20,-24,-55,62,-127,-32,-50,11, 
  /* [33][0][][] */ 85,32,64,64,-29,68,66,127, 
  /* [34][0][][] */ 120,26,-127,-35,-69,8,85,37, 
  /* [35][0][][] */ 113,117,101,-121,-66,-92,46,127, 
  /* [36][0][][] */ -42,-101,127,39,53,65,5,-30, 
  /* [37][0][][] */ 3,9,-28,-12,-8,-60,-55,127, 
  /* [38][0][][] */ 127,2,49,12,0,18,-56,36, 
  /* [39][0][][] */ 56,106,-120,-127,-115,97,53,-78, 
  /* [40][0][][] */ -44,127,-42,62,-60,-28,-67,-12, 
  /* [41][0][][] */ -127,35,-34,-58,90,54,-10,-86, 
  /* [42][0][][] */ 40,-40,-8,-31,-30,127,7,92, 
  /* [43][0][][] */ -70,46,127,22,69,15,-31,9, 
  /* [44][0][][] */ 13,127,-3,32,-55,-82,-25,-7, 
  /* [45][0][][] */ -81,87,71,-127,-77,15,-62,-52, 
  /* [46][0][][] */ 31,-42,-15,11,22,10,-127,62, 
  /* [47][0][][] */ -75,-127,30,48,45,-78,5,87, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0025582283269613981, 0.0028353645466268063, 0.0025228280574083328, 0.0045532011426985264, 0.0029618686530739069, 0.002555840415880084, 0.001178571255877614, 0.0020062688272446394, 0.002867075614631176, 0.0013992422027513385, 0.0026576865930110216, 0.0036980421282351017, 0.0013574515469372272, 0.0053411773405969143, 0.0046070646494626999, 0.0026311157271265984, 0.0067959809675812721, 0.0016617549117654562, 0.0028042274061590433, 0.0028915272559970617, 0.0033646137453615665, 0.00039794846088625491, 0.0031461173202842474, 0.0022858905140310526, 0.002911929739639163, 0.0020268657244741917, 0.0025953326839953661, 0.0030331939924508333, 0.0039244703948497772, 0.0041414471343159676, 0.0023372122086584568, 0.0023525727447122335, 0.0030807766597718, 0.0034534502774477005, 0.0016926538664847612, 0.0013457091990858316, 0.0026350333355367184, 0.0014347772812470794, 0.0021048977505415678, 0.0022470620460808277, 0.0039194305427372456, 0.0027556978166103363, 0.0023775261361151934, 0.0041586472652852535, 0.0025322083383798599, 0.0022051974665373564, 0.0020312848500907421, 0.0024032287765294313, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 5594, -12032, -975, 7411, 2868, -7378, 2226, 3359, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00020333491556812078, 0.00018516923591960222, 0.00011017790529876947, 0.000159827308380045, 0.0002534986415412277, 0.00014908313460182399, 0.0001994810882024467, 9.8795258963946253e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -21,-3,-10,-29,-62,-20,-4,-17,62,9,10,-3,7,13,-13,5,-25,7,-18,-17,0,4,-16,3,22,-14,82,8,-13,-81,-14,13,-4,28,127,-5,-21,-38,22,-39,22,5,-4,-15,-16,0,-16,-74, 
  /* [1][0][][] */ 22,-26,-15,58,5,-13,13,32,71,83,45,-55,-57,68,3,3,-9,-35,14,-27,-65,37,-45,34,85,15,-38,34,25,-8,127,20,-23,-38,-36,-3,-16,12,-24,-2,0,-20,7,19,-5,39,26,23, 
  /* [2][0][][] */ -58,6,-67,108,-52,-78,22,-62,-73,39,56,-109,-22,-6,-34,-2,127,22,-62,-44,-67,-32,-36,19,89,-43,116,-1,83,-15,-66,23,-4,-32,50,7,-48,32,-8,-95,55,-65,-55,-117,-13,-61,-57,105, 
  /* [3][0][][] */ 24,-51,10,-46,28,-20,-14,-79,43,-68,5,-36,-80,-74,-22,4,7,-11,40,-38,-8,32,-83,0,66,-39,44,17,2,-10,-4,-31,-36,36,22,-29,-52,23,-1,-1,127,17,-51,32,-47,49,-14,-56, 
  /* [4][0][][] */ 17,0,15,11,4,35,-9,-10,43,18,6,-41,-1,6,-68,18,-2,21,24,-16,-27,31,0,37,31,7,-26,7,42,-8,-14,25,-1,-7,28,17,-127,1,52,4,14,-12,1,18,-31,47,-28,-97, 
  /* [5][0][][] */ -45,-99,36,127,-30,-3,-51,102,-98,83,48,42,-84,26,70,-40,-18,36,31,4,-4,39,42,46,-54,12,-26,39,-45,-94,43,26,-107,-51,-31,-2,126,-4,-21,8,-34,-12,86,102,23,39,44,51, 
  /* [6][0][][] */ 94,5,-9,-5,92,-32,-30,-66,44,27,34,-29,-11,10,14,2,-3,-4,-7,-27,-34,15,17,22,65,-65,51,0,-20,112,-22,15,42,30,-127,-15,-93,-38,23,-66,-13,-1,-9,-96,-6,6,-17,-5, 
  /* [7][0][][] */ -35,-68,63,-39,21,127,49,-49,8,-92,-49,8,3,-14,-49,1,17,-59,116,65,41,-30,14,0,-15,7,105,-4,48,23,16,6,-36,-22,-40,101,-112,93,-35,-34,-45,52,1,-68,16,-8,76,-21, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0086417337879538536, 0.0078696925193071365, 0.0046825609169900417, 0.0067926603369414806, 0.010773692280054092, 0.0063360333442687988, 0.0084779458120465279, 0.004198798444122076, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 8150, 3593, -1739, 7191, -79, -1041, 4477, -513, 1861, 4559, 170, 238, -2841, 13461, 3454, -534, -5110, -529, -1849, -771, 15368, 38, -15977, 307, -4864, -498, 231, -263, -1968, -1138, -6347, 67, 16575, -1534, -849, 1714, -1478, 249, -1196, 2392, 18822, 1188, 454, 965, 640, 12, -3954, 6375, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00021140241005923599, 0.0002659230085555464, 0.00020741998741868883, 0.00033702224027365446, 0.00036334290052764118, 0.00049826601753011346, 9.9899283668491989e-05, 0.00021754966292064637, 7.8598481195513159e-05, 0.00021617121819872409, 0.00034772916114889085, 0.00045367638813331723, 0.00021994287089910358, 0.00011878328223247081, 0.00020175032841507345, 0.00032145829754881561, 7.5358366302680224e-05, 0.0013493751175701618, 0.00040186801925301552, 0.00017094625218305737, 0.00010823822231031954, 0.00047458038898184896, 0.00011835162149509415, 0.00015127414371818304, 0.00032844918314367533, 0.00026350075495429337, 0.00029596660169772804, 0.0003982734342571348, 0.00038045458495616913, 0.00021081694285385311, 0.00017482328985352069, 0.00037490634713321924, 6.7679728090297431e-05, 0.00034127652179449797, 0.00017734261928126216, 0.00067372951889410615, 0.00014681150787509978, 0.00023830507416278124, 0.0006450676592066884, 0.00026845102547667921, 5.4429725423688069e-05, 0.00031152501469478011, 0.00022075414017308503, 0.00010226693120785058, 0.00030007003806531429, 0.00025672544143162668, 0.00012853721273131669, 0.00041754383710213006, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -59,48,-44,-50,-8,-20,16,-17,-8,-19,5,42,1,-90,-108,23,127,-3,69,48,-89,-58,90,-125,-11,-46,-8,99,-12,12,34,127,-23,-11,-10,2,-36,-36,-9,21,103,-94,-39,49,73,-113,-41,-3, -10,-127,32,-127,-2,-21,-77,127,62,-75,19,46,19,-127,-116,12,-44,10,-22,-78,-69,2,73,127,12,-2,10,127,23,-6,3,-101,-95,29,-4,-24,127,-125,57,-8,-7,-127,-47,36,101,74,35,-33, -20,-1,17,-27,-3,37,19,68,-7,11,1,30,34,27,-96,26,59,12,-19,15,-126,52,72,12,-9,75,2,-38,-24,-1,9,-38,-53,4,4,3,-34,127,-16,14,72,-45,29,-30,63,42,-58,-12, 
  /* [0][1][][] */ -27,-21,-116,-14,-32,19,4,-1,28,-66,-6,-113,-30,-49,-127,127,108,8,127,95,-13,127,108,107,4,-54,-39,1,56,-38,40,-103,6,-26,-47,0,-20,-91,47,21,84,127,-10,-11,-71,127,58,-33, -127,50,127,118,127,-117,-127,-10,-16,-127,-127,-127,127,-25,-8,37,-2,-127,-100,-127,127,-16,-71,-100,127,-34,127,-53,127,127,-53,78,-127,-127,127,-127,89,-82,-127,-127,20,104,-88,26,-127,-73,127,127, -18,6,10,20,39,127,-15,56,65,5,49,-52,-9,-25,-80,-17,48,54,-6,56,-78,-114,127,-25,7,127,17,13,48,28,127,27,16,14,60,11,-15,92,48,-7,-1,80,127,-12,-53,-54,56,-6, 
  /* [0][2][][] */ -28,5,-47,-4,-4,-14,21,-17,39,24,6,43,-4,-22,108,9,42,8,58,13,-69,-6,63,18,-3,-48,-13,-72,3,-14,0,-33,0,57,0,-6,-94,12,-4,6,21,-30,-27,-61,-23,8,-76,-38, -16,-47,51,-2,-78,-20,-89,-98,127,77,46,54,-5,-57,38,15,77,111,-36,-14,-109,-3,22,-32,4,-41,-67,-79,-22,-32,111,29,-56,55,-59,-8,35,-105,37,42,-127,-34,-93,127,23,-4,48,-50, 5,-10,14,-4,-39,26,17,-98,8,-14,-17,24,13,13,120,-119,53,-18,-22,-16,-93,6,41,-9,-2,36,-29,18,-1,-26,26,13,-22,53,-35,-1,-108,103,-20,26,-3,-27,48,51,-25,-17,-89,-23, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.0089846020564436913, 0.011301727034151554, 0.0088153490796685219, 0.014323445037007332, 0.015442072413861752, 0.021176306530833244, 0.0042457194067537785, 0.0092458603903651237, 0.0033404354471713305, 0.0091872764751315117, 0.014778489246964455, 0.019281245768070221, 0.0093475719913840294, 0.0050482894293963909, 0.0085743889212608337, 0.013661976903676987, 0.0032027305569499731, 0.057348441332578659, 0.017079390585422516, 0.0072652152739465237, 0.0046001244336366653, 0.020169666036963463, 0.0050299437716603279, 0.0064291511662304401, 0.01395909022539854, 0.011198781430721283, 0.012578580528497696, 0.016926620155572891, 0.016169318929314613, 0.0089597199112176895, 0.0074299895204603672, 0.01593351922929287, 0.0028763883747160435, 0.014504252001643181, 0.0075370608828961849, 0.02863350510597229, 0.0062394891865551472, 0.010127965360879898, 0.027415376156568527, 0.011409168131649494, 0.0023132632486522198, 0.013239813037216663, 0.009382050484418869, 0.0043463446199893951, 0.012752976268529892, 0.010910830460488796, 0.0054628313519060612, 0.017745612189173698, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 3076, 1269, 5400, 8189, 307, 3432, 1333, 1748, 2071, 3181, 2501, 4575, 2605, 1640, 2546, 53, 292, -2348, 4488, 1813, 1199, 4618, 8238, 516, 2937, 2357, 1650, -93, -1235, 1054, 5917, 2053, 1331, 944, 731, -300, 633, 1873, -46, 1841, 1208, 4665, 1639, 501, 2384, 1875, -30, 11119, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00027879024855792522, 0.00041432541911490262, 0.00015106107457540929, 0.00013858302554581314, 0.0012530760141089559, 0.00019771406368818134, 0.00046164894592948258, 0.00037784568849019706, 0.00028667852166108787, 0.00020661935559473932, 0.00029375663143582642, 0.00014059465320315212, 0.00029761853511445224, 0.00023104736465029418, 0.00021153401758056134, 0.00022881511540617794, 0.00044289891957305372, 0.0003347308374941349, 0.00021189998369663954, 0.00055490265367552638, 0.00060551491333171725, 0.00018430780619382858, 0.00010615814971970394, 0.00038032591692171991, 0.00020304939243942499, 0.00035725199268199503, 0.00041606478043831885, 0.00031834575929678977, 0.00031769237830303609, 0.00087108061416074634, 0.0001616381632629782, 0.00038221245631575584, 0.00048972090007737279, 0.00029316320433281362, 0.00083247636212036014, 0.00031864497577771544, 0.00027447936008684337, 0.00021859185653738678, 0.00027483055600896478, 0.00042169919470325112, 0.00033266056561842561, 0.00017816592298913747, 0.00023935953504405916, 0.00040467997314408422, 0.00023656412668060511, 0.00028209082665853202, 0.00050231668865308166, 9.319700620835647e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -123,-35,25,-127,-114,127,-11,-62, 
  /* [1][0][][] */ 74,0,22,-26,10,58,-127,46, 
  /* [2][0][][] */ -57,75,-104,123,-60,127,31,59, 
  /* [3][0][][] */ 91,-24,-27,70,-1,-62,11,127, 
  /* [4][0][][] */ -76,-2,-6,17,-19,-28,127,3, 
  /* [5][0][][] */ 36,127,44,64,-116,-46,17,-13, 
  /* [6][0][][] */ -4,-70,42,127,14,-94,-19,43, 
  /* [7][0][][] */ 127,12,102,15,-91,30,90,120, 
  /* [8][0][][] */ -41,-127,44,58,83,-27,-26,6, 
  /* [9][0][][] */ -69,-113,18,-34,-28,10,-50,127, 
  /* [10][0][][] */ -26,-127,26,108,60,118,-2,-17, 
  /* [11][0][][] */ -98,-127,33,-87,65,25,-47,85, 
  /* [12][0][][] */ 92,-20,103,-88,26,-127,86,5, 
  /* [13][0][][] */ 42,20,22,127,-16,19,39,-69, 
  /* [14][0][][] */ -28,-13,41,-1,127,-10,-1,119, 
  /* [15][0][][] */ -91,127,71,96,70,109,-58,108, 
  /* [16][0][][] */ 13,-32,-86,-127,-66,76,26,62, 
  /* [17][0][][] */ 34,127,11,58,-35,-51,-4,17, 
  /* [18][0][][] */ 14,23,-6,-127,-38,-72,12,-15, 
  /* [19][0][][] */ 25,-81,-111,-127,-63,79,4,-12, 
  /* [20][0][][] */ 21,6,9,4,127,23,36,-39, 
  /* [21][0][][] */ -127,-88,-55,-101,39,37,43,-26, 
  /* [22][0][][] */ -71,-49,94,119,46,-47,-58,127, 
  /* [23][0][][] */ 17,36,-41,127,121,26,42,97, 
  /* [24][0][][] */ 127,-4,-121,-23,2,-33,44,-49, 
  /* [25][0][][] */ 4,-24,-44,-32,74,-13,-127,-71, 
  /* [26][0][][] */ 127,6,103,-33,-89,51,53,122, 
  /* [27][0][][] */ 7,-41,-36,127,33,4,-21,-91, 
  /* [28][0][][] */ -68,127,83,70,69,-24,-26,1, 
  /* [29][0][][] */ -5,0,53,3,-70,-2,127,66, 
  /* [30][0][][] */ -67,-74,49,-60,-78,127,63,39, 
  /* [31][0][][] */ 122,14,101,-24,-113,76,78,127, 
  /* [32][0][][] */ -114,-12,-28,40,-26,23,127,16, 
  /* [33][0][][] */ -127,125,66,77,39,31,-87,19, 
  /* [34][0][][] */ 119,11,21,-12,7,53,-127,21, 
  /* [35][0][][] */ 2,0,22,31,-46,23,11,-127, 
  /* [36][0][][] */ 15,6,-68,-94,36,-17,29,127, 
  /* [37][0][][] */ 62,-43,-41,-61,-28,36,57,-127, 
  /* [38][0][][] */ 43,127,30,105,-83,-104,-29,-25, 
  /* [39][0][][] */ 89,-3,100,-9,-82,29,122,127, 
  /* [40][0][][] */ -63,-77,127,109,-14,-30,-89,34, 
  /* [41][0][][] */ 47,-28,6,13,16,-79,-11,127, 
  /* [42][0][][] */ 44,-104,-62,-104,-46,58,24,-127, 
  /* [43][0][][] */ 97,4,119,-31,-97,-19,118,127, 
  /* [44][0][][] */ -127,-76,-54,114,101,-20,-86,48, 
  /* [45][0][][] */ 127,-31,102,-45,-32,16,-21,70, 
  /* [46][0][][] */ 39,-127,11,66,119,-13,50,7, 
  /* [47][0][][] */ 70,127,-15,103,-42,-90,36,-92, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0028673666529357433, 0.0042613502591848373, 0.0015536680584773421, 0.0014253308763727546, 0.012887926772236824, 0.0020334955770522356, 0.0047480743378400803, 0.0038861550856381655, 0.0029484978877007961, 0.0021250867284834385, 0.0030212965793907642, 0.0014460205566138029, 0.0030610163230448961, 0.0023763296194374561, 0.0021756342612206936, 0.002353370888158679, 0.0045552295632660389, 0.0034427174832671881, 0.002179398201406002, 0.0057071917690336704, 0.0062277405522763729, 0.0018956117564812303, 0.0010918399784713984, 0.0039116642437875271, 0.0020883695688098669, 0.0036743483506143093, 0.0042792395688593388, 0.0032741962932050228, 0.0032674763351678848, 0.0089590921998023987, 0.0016624537529423833, 0.003931067418307066, 0.005036795511841774, 0.003015192924067378, 0.0085620461031794548, 0.0032772738486528397, 0.0028230291791260242, 0.0022482243366539478, 0.0028266410809010267, 0.004337189719080925, 0.0034214246552437544, 0.0018324422417208552, 0.0024618206080049276, 0.0041621467098593712, 0.0024330697488039732, 0.0029013133607804775, 0.0051663434132933617, 0.00095853424863889813, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 3624, 3092, 1166, 11732, 4431, 5213, 2475, -3416, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00014081204426474869, 0.00011890733730979264, 0.0001193144780700095, 0.00012788595631718636, 0.0001152029144577682, 0.00010971832671202719, 9.6891606517601758e-05, 0.00032155649387277663, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -31,40,-28,-2,-43,-26,-83,25,10,21,34,45,38,4,-43,13,-41,42,8,-61,31,44,-127,7,-8,8,-32,50,-3,-10,21,24,12,-23,35,16,-2,110,-70,-14,-8,17,-28,32,5,9,20,-9, 
  /* [1][0][][] */ -74,-100,-57,3,90,-21,-126,59,-20,-42,-18,-75,-22,73,12,-6,117,-127,-13,-10,-62,1,6,-19,15,-8,-27,-57,22,-13,-119,-23,22,-52,-83,-105,45,3,-92,2,5,40,10,79,-14,7,3,40, 
  /* [2][0][][] */ 11,-66,14,55,116,20,96,-10,-30,-28,-12,-43,4,-26,22,34,-28,-93,43,-57,6,-67,-52,20,-74,55,72,-92,-37,-4,-59,-47,18,11,-70,-54,-7,127,82,-31,-7,7,-25,-72,46,41,52,-28, 
  /* [3][0][][] */ 8,-3,16,-17,36,29,19,-94,23,13,-16,1,-1,-117,-14,-1,-32,7,-20,-3,-11,55,-127,1,11,-100,40,23,46,-18,-32,57,1,7,-6,-40,-95,-44,9,-17,-12,-4,35,4,-18,-3,-4,-49, 
  /* [4][0][][] */ 36,-62,6,79,51,12,-27,-9,-41,-13,22,-39,77,38,-23,33,-49,-66,71,30,38,-55,127,20,-28,16,-60,-15,-10,18,-79,-47,90,-30,-45,-61,-48,-47,-23,-3,-69,104,1,-6,63,83,46,30, 
  /* [5][0][][] */ -60,-19,-35,47,-5,9,-3,-52,-57,-33,-2,-21,17,33,-65,11,127,-19,51,-68,26,-93,-8,-4,85,-111,-97,-6,52,-39,32,-70,12,-57,-37,19,-78,-25,15,-35,-41,26,87,48,39,18,24,-37, 
  /* [6][0][][] */ -38,4,-36,31,-24,78,-76,11,-22,-2,-127,8,45,32,123,18,24,5,42,-6,34,-12,-44,-16,7,-5,-68,17,2,-50,6,-19,31,-44,3,3,-6,-10,-57,-24,-32,43,-26,34,26,28,31,-8, 
  /* [7][0][][] */ 30,-2,38,-16,4,8,13,-13,15,6,-7,-1,-9,-5,-2,-13,13,-3,-23,-19,-19,14,127,14,6,-14,0,11,8,-7,-19,14,-1,21,1,-18,-10,14,7,27,4,-2,8,0,-16,-2,-23,14, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0059845116920769215, 0.0050535616464912891, 0.0050708651542663574, 0.0054351529106497765, 0.004896123893558979, 0.0046630287542939186, 0.0041178930550813675, 0.013666150160133839, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 6003, -978, -1756, 284, 9620, 4243, -1367, 2821, 6617, 175, -2527, -1952, -81, -690, -403, 49, 12569, -2177, 1548, 33584, -309, 16735, 400, -981, -405, -7970, 9446, -350, 988, -247, 557, 8099, -87, 1306, -571, 411, 8988, -1613, 1706, -1209, 290, 454, 16987, -8596, 893, 393, 113, 393, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 6.0315229347907007e-05, 0.00016234406211879104, 0.0019023830536752939, 0.0010099136270582676, 0.00012016328400932252, 0.00013832021795678884, 8.8386186689604074e-05, 0.00055786280427128077, 0.00012949167285114527, 0.00041918939677998424, 4.9533144192537293e-05, 0.0004924637614749372, 0.00068826274946331978, 0.00016426746151410043, 0.000123552032164298, 0.0057267388328909874, 0.00015247393457684666, 0.00020628837228287011, 0.00037522526690736413, 8.1632781075313687e-05, 0.0006895599071867764, 0.00011109304614365101, 0.00028781520086340606, 0.00012859290291089565, 0.0001687507756287232, 0.00074592797318473458, 0.0001247866457561031, 0.00028351668152026832, 0.00046778592513874173, 0.00056134921032935381, 0.0001950395671883598, 0.0001079171706805937, 0.00089323235442861915, 0.00043740746332332492, 0.00021038434351794422, 0.0003269380540587008, 0.00012528031948022544, 7.3930284997913986e-05, 0.00011242843174841255, 0.00026047253049910069, 0.00043713569175451994, 0.00033149885712191463, 8.2438084064051509e-05, 0.00013784735347144306, 0.00083247304428368807, 0.00049823179142549634, 0.0031804558821022511, 0.00053791102254763246, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 109,-33,-69,-100,20,-103,73,-59,65,23,102,56,-101,66,53,-119,63,-88,-6,-38,-127,-60,36,109,-3,67,3,70,-127,-26,90,-84,-48,-67,50,81,-127,48,113,81,-40,-127,-79,56,-75,-36,6,-82, 72,-51,81,127,84,33,127,-127,-83,95,64,78,-3,61,58,119,66,-85,-125,-57,96,-93,50,3,104,127,-28,86,4,42,85,-41,46,112,127,127,-92,52,58,-25,73,27,-41,112,127,116,-4,-12, 23,-18,9,-45,36,53,27,-84,-15,43,-75,45,91,-6,-68,-2,25,-24,96,-13,42,-6,-84,-81,19,5,-4,32,33,81,41,13,-4,-49,30,34,-19,9,17,-56,-53,110,21,75,-64,-82,-4,75, 
  /* [0][1][][] */ 127,70,-127,14,-85,-127,79,-60,89,-72,127,-93,89,80,127,126,-49,112,-19,-85,121,-88,49,127,-12,-5,-33,19,-61,84,61,-127,-127,-76,-11,29,-11,92,127,127,-38,-84,-127,68,-5,-33,-127,-127, 109,127,121,-23,-127,9,126,-121,-127,-127,89,-127,37,127,101,-127,-43,127,127,-127,-68,-127,73,-31,60,10,-127,71,5,127,127,-105,117,127,-21,7,-17,127,81,-40,127,-11,-49,127,-14,127,122,42, 21,59,8,6,-33,76,32,-78,-16,-94,-75,-64,-127,-5,-77,-1,29,38,-127,-46,-51,-18,-127,-94,-36,3,-68,26,40,78,26,10,6,-65,-8,-1,-1,27,18,-73,-50,92,-3,99,5,-94,1,94, 
  /* [0][2][][] */ 39,-40,-23,4,27,-27,14,-20,68,14,36,52,12,30,-12,-13,-127,-25,-4,-21,16,-48,11,43,85,-18,-28,-96,17,29,-15,-77,-20,-47,-62,3,79,26,41,72,-82,-65,-114,44,1,-12,92,-66, 9,-63,11,5,25,-1,29,-46,-89,57,7,66,-14,44,-4,13,-102,-18,-11,-58,-33,-74,29,-6,127,-15,-60,-127,13,75,0,-49,34,78,-54,17,87,55,12,-26,-48,-9,-36,100,-3,-17,-97,56, -1,-22,31,6,-1,19,14,-25,-20,45,-26,40,22,-22,-21,-1,16,2,19,-37,10,-5,-41,-41,-7,-10,-23,-39,13,63,-5,7,3,-42,-37,0,70,21,8,-39,-87,45,-7,57,5,1,3,10, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.002563397167250514, 0.0068996227346360683, 0.080851279199123383, 0.04292132705450058, 0.0051069394685328007, 0.0058786091394722462, 0.0037564127705991268, 0.023709168657660484, 0.005503396037966013, 0.017815548926591873, 0.0021051585208624601, 0.020929709076881409, 0.029251165688037872, 0.0069813667796552181, 0.0052509610541164875, 0.24338638782501221, 0.0064801420085132122, 0.0087672555819153786, 0.015947073698043823, 0.0034693931229412556, 0.02930629625916481, 0.004721454344689846, 0.012232146225869656, 0.0054651983082294464, 0.0071719079278409481, 0.031701937317848206, 0.0053034322336316109, 0.012049458920955658, 0.019880902022123337, 0.023857342079281807, 0.0082891816273331642, 0.004586479626595974, 0.037962373346090317, 0.018589816987514496, 0.0089413346722722054, 0.013894867151975632, 0.0053244135342538357, 0.003142037196084857, 0.0047782082110643387, 0.011070082895457745, 0.018578266724944115, 0.014088701456785202, 0.0035036185290664434, 0.0058585125952959061, 0.035380102694034576, 0.021174849942326546, 0.1351693719625473, 0.022861218079924583, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { -589, -7049, 80187, 5491, 9819, 3296, 2896, 287, -1322, -7147, 665, 3227, 16041, -11193, 304, 3818, -6939, -368, 2860, 5666, 8203, 2914, -669, 281, 10390, 24551, 9888, -10507, 1965, -1327, -85, -3106, 18527, 7075, 10904, -1348, -10632, -299, -3571, 294, -12034, -9454, -1678, 2592, 7245, -10643, 3325, -1591, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00032727338839322329, 0.00034411207889206707, 1.2745662388624623e-05, 0.00020845599647145718, 0.00031484288047067821, 0.0006295365747064352, 0.0011949389008805156, 0.00061410979833453894, 0.00073455454548820853, 0.00041605750448070467, 0.0015358803793787956, 0.00036267467658035457, 9.6102477982640266e-05, 0.00038107117870822549, 0.00055180944036692381, 6.7790599132422358e-05, 0.00028588311397470534, 0.00045168673386797309, 0.00031796089024282992, 0.00024577495059929788, 0.0001555786730023101, 0.0016743955202400684, 0.0005996664403937757, 0.00078469252912327647, 0.00026162998983636498, 8.0520949268247932e-05, 0.00042978278361260891, 0.00033002911368384957, 0.0011983858421444893, 0.00038884737296029925, 0.00096717872656881809, 0.0015501237940043211, 0.00012723503459710628, 0.00034060256439261138, 0.00030780423549003899, 0.00074976356700062752, 0.00043774308869615197, 0.00046965369256213307, 0.0011081984266638756, 0.00037888492806814611, 0.00034221794339828193, 0.00027821576804853976, 0.00038507525459863245, 0.00034866103669628501, 0.0001411389239365235, 0.00031317901448346674, 7.3411778430454433e-05, 0.00060957396635785699, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ 15,60,0,-13,93,-30,127,-12, 
  /* [1][0][][] */ 127,87,61,19,-6,-47,-12,105, 
  /* [2][0][][] */ -66,13,-5,127,9,-21,-38,60, 
  /* [3][0][][] */ 41,-29,-127,3,4,-42,28,109, 
  /* [4][0][][] */ -107,77,-127,-23,9,25,-47,-41, 
  /* [5][0][][] */ 127,-18,-6,-49,-2,-34,5,-125, 
  /* [6][0][][] */ 11,-3,-5,7,-127,-28,61,0, 
  /* [7][0][][] */ -3,-59,-3,3,-25,2,-127,-2, 
  /* [8][0][][] */ -15,26,34,-15,127,13,-59,-21, 
  /* [9][0][][] */ 127,-37,29,5,3,-30,47,104, 
  /* [10][0][][] */ 127,7,-6,-34,-2,8,-1,-123, 
  /* [11][0][][] */ -53,-1,1,127,-2,-41,-31,34, 
  /* [12][0][][] */ -127,2,-74,-25,15,106,-61,-120, 
  /* [13][0][][] */ 115,6,127,10,-9,21,22,47, 
  /* [14][0][][] */ -127,-7,14,13,-1,-11,6,122, 
  /* [15][0][][] */ -127,9,0,127,-1,-3,-23,116, 
  /* [16][0][][] */ 75,-74,127,86,-11,-123,37,62, 
  /* [17][0][][] */ 15,-54,-85,127,1,21,-12,115, 
  /* [18][0][][] */ 14,-29,-127,47,-16,-2,34,125, 
  /* [19][0][][] */ 27,13,-8,127,-9,7,-73,-42, 
  /* [20][0][][] */ 15,47,105,-111,10,-64,11,-127, 
  /* [21][0][][] */ 4,-4,-6,-4,-127,-15,61,2, 
  /* [22][0][][] */ 1,55,0,-11,3,127,-14,4, 
  /* [23][0][][] */ 119,20,-6,96,-1,2,-43,-127, 
  /* [24][0][][] */ -127,17,-80,-50,19,-42,-49,-54, 
  /* [25][0][][] */ -49,-2,-64,-41,10,-127,15,-47, 
  /* [26][0][][] */ -107,-29,-127,3,3,2,-26,-30, 
  /* [27][0][][] */ 100,3,127,20,-16,45,11,41, 
  /* [28][0][][] */ 9,-67,-19,31,26,-127,0,17, 
  /* [29][0][][] */ -3,-10,27,-127,-20,-7,16,-3, 
  /* [30][0][][] */ -38,6,127,-4,0,4,-10,-120, 
  /* [31][0][][] */ -2,8,4,-5,127,23,-49,-1, 
  /* [32][0][][] */ -127,-21,-120,-12,0,-35,-25,-69, 
  /* [33][0][][] */ 15,-53,-1,-30,36,-127,13,-23, 
  /* [34][0][][] */ -47,-116,-127,69,0,-62,-16,-27, 
  /* [35][0][][] */ 58,7,-116,1,0,-5,4,127, 
  /* [36][0][][] */ 63,34,89,25,0,127,6,41, 
  /* [37][0][][] */ -7,21,0,127,5,-20,-16,14, 
  /* [38][0][][] */ 4,21,9,5,127,22,-34,-3, 
  /* [39][0][][] */ -13,1,-12,9,-32,127,-90,-7, 
  /* [40][0][][] */ 127,-19,122,17,-22,29,15,62, 
  /* [41][0][][] */ 125,-10,127,16,-14,10,31,44, 
  /* [42][0][][] */ 64,-57,-16,-28,17,127,14,-32, 
  /* [43][0][][] */ -11,-73,-6,-3,-43,-16,-127,6, 
  /* [44][0][][] */ -24,-127,37,98,19,41,14,-120, 
  /* [45][0][][] */ 116,13,127,-3,-10,29,25,47, 
  /* [46][0][][] */ -81,19,1,127,3,2,-37,66, 
  /* [47][0][][] */ -4,48,-8,-2,1,127,-15,4, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0033108694478869438, 0.0034812185913324356, 0.0001289418141823262, 0.0021088502835482359, 0.0031851157546043396, 0.0063687227666378021, 0.01208862941712141, 0.0062126568518579006, 0.0074311397038400173, 0.0042090560309588909, 0.015537772327661514, 0.0036690074484795332, 0.000972223118878901, 0.0038551159668713808, 0.005582394078373909, 0.0006858052802272141, 0.0028921435587108135, 0.0045695002190768719, 0.0032166594173759222, 0.0024863884318619967, 0.0015739154769107699, 0.016939064487814903, 0.0060665407218039036, 0.0079383617267012596, 0.0026467863935977221, 0.00081459223292768002, 0.0043479083105921745, 0.0033387476578354836, 0.012123500928282738, 0.0039337840862572193, 0.0097844880074262619, 0.015681866556406021, 0.0012871763901785016, 0.003445714246481657, 0.0031139093916863203, 0.0075850016437470913, 0.0044284388422966003, 0.0047512631863355637, 0.011211116798222065, 0.0038329989183694124, 0.0034620563965290785, 0.0028145767282694578, 0.0038956233765929937, 0.0035272380337119102, 0.0014278354356065392, 0.0031682832632213831, 0.00074267206946387887, 0.0061667701229453087, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 1702, 582, -83, -8675, 588, -516, -601, 4028, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00022054155124351382, 0.00025283999275416136, 0.00035662102163769305, 0.00018489902140572667, 0.00023737140872981399, 0.00012135514407418668, 0.00031448795925825834, 0.00018213418661616743, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -14,-13,-22,15,-10,-127,8,39, 
  /* [1][0][][] */ -59,20,-127,119,5,61,-18,41, 
  /* [2][0][][] */ 5,-12,23,-3,-9,-127,12,25, 
  /* [3][0][][] */ 23,52,49,127,19,-44,-37,-10, 
  /* [4][0][][] */ 16,53,22,-18,-127,-5,21,-8, 
  /* [5][0][][] */ 62,-29,127,-107,14,-62,-9,-41, 
  /* [6][0][][] */ 30,127,44,-36,39,-9,-64,-21, 
  /* [7][0][][] */ -18,-26,-40,-17,-11,-127,22,46, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0093730157241225243, 0.010745699517428875, 0.015156392939388752, 0.0078582083806395531, 0.010088284499943256, 0.0051575936377048492, 0.013365738093852997, 0.0077407024800777435, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[8] = { 6585, -269, 3698, 1936, 11498, 842, 1935, -1561, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 9.5979594334494323e-05, 0.0004599156673066318, 0.0001719663996482268, 0.0004876128223259002, 0.00019621041428763419, 0.00027021727873943746, 0.00037553071160800755, 9.6146039140876383e-05, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -20,-1,4,-3,-1,27,-9,-2, 15,0,5,-8,11,127,7,127, 5,4,5,-9,0,17,-1,7, 
  /* [0][1][][] */ 6,-127,-10,2,-13,-6,-124,-6, -127,105,-84,127,-127,-9,127,-43, 12,3,-7,-65,-4,2,47,-20, 
  /* [0][2][][] */ 19,0,-3,-4,0,-23,-4,1, 61,1,127,-21,14,-114,-8,13, 11,4,-8,-8,1,-20,-7,3, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0040791328065097332, 0.019546415656805038, 0.0073085720650851727, 0.020723544061183929, 0.0083389421924948692, 0.011484234593808651, 0.015960054472088814, 0.0040862066671252251, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[8] = { 54897, -1609, 30319, 33011, 13178, 477785, 18045, 30657, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 6.3905885326676071e-05, 5.0455975724617019e-05, 0.00011181544687133282, 4.9408190534450114e-05, 0.00013712573854718357, 7.9591027315473184e-06, 1.9443717974354513e-05, 8.5996747657191008e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 11,-3,13, 10,-23,31, 14,-23,22, 
  /* [0][1][][] */ 41,30,27, 68,19,60, 26,-32,39, 
  /* [0][2][][] */ -20,-93,-13, -29,-127,-1, -7,-55,18, 
  /* [1][0][][] */ 32,75,25, 7,8,-2, -30,-69,-26, 
  /* [1][1][][] */ 54,122,40, 3,0,-3, -54,-127,-39, 
  /* [1][2][][] */ 30,45,12, 5,-2,0, -32,-53,-3, 
  /* [2][0][][] */ 43,91,11, 54,127,13, 18,43,0, 
  /* [2][1][][] */ -47,-85,-28, -81,-94,-38, -31,-7,-20, 
  /* [2][2][][] */ 0,10,7, 4,16,0, 1,11,-6, 
  /* [3][0][][] */ 43,-34,-19, 77,-39,-42, 30,-18,-14, 
  /* [3][1][][] */ 79,-59,-40, 127,-58,-77, 59,-30,-31, 
  /* [3][2][][] */ 17,-23,-6, 40,-31,-18, 14,-13,-4, 
  /* [4][0][][] */ -12,-23,-4, 28,45,10, -15,-28,-4, 
  /* [4][1][][] */ -28,-59,-10, 64,127,19, -33,-61,-7, 
  /* [4][2][][] */ -9,-13,2, 21,25,-3, -11,-13,-2, 
  /* [5][0][][] */ -36,-51,-37, -67,-83,-68, -55,-27,-34, 
  /* [5][1][][] */ -65,-100,-51, -96,-127,-83, -65,-35,-48, 
  /* [5][2][][] */ -5,11,-16, -11,2,-18, -16,12,-13, 
  /* [6][0][][] */ -99,-6,33, 2,17,-14, 63,13,-21, 
  /* [6][1][][] */ -127,-35,41, 12,17,-27, 104,12,-33, 
  /* [6][2][][] */ -53,-15,14, 12,-11,-4, 31,-17,27, 
  /* [7][0][][] */ -7,16,-3, -17,22,-8, -8,21,-8, 
  /* [7][1][][] */ 16,84,-7, 22,127,-23, -3,60,-27, 
  /* [7][2][][] */ -28,-50,-20, -43,-52,-33, -21,4,-20, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.01629599928855896, 0.01286627259105444, 0.028512937948107719, 0.012599088251590729, 0.034967061132192612, 0.002029570983722806, 0.0049581476487219334, 0.021929169073700905, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10011134296655655, } };
const TfArray<1, int> quant46_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.098848171532154083, } };
const TfArray<1, int> quant47_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.097228668630123138, } };
const TfArray<1, int> quant51_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.077042900025844574, } };
const TfArray<1, int> quant54_zero = { 1, { 19 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.1104816198348999, } };
const TfArray<1, int> quant55_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.06251130998134613, } };
const TfArray<1, int> quant59_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.018888581544160843, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023034358397126198, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.026631040498614311, } };
const TfArray<1, int> quant62_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.067765302956104279, } };
const TfArray<1, int> quant63_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.019407838582992554, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.044205464422702789, } };
const TfArray<1, int> quant66_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.079758830368518829, } };
const TfArray<1, int> quant67_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.020108286291360855, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.034632418304681778, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.065400831401348114, } };
const TfArray<1, int> quant70_zero = { 1, { -32 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_8_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
